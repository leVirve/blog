<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Salas&#39;</title>
  <subtitle>Do it for your pride.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://levirve.github.io/"/>
  <updated>2016-08-16T16:01:29.793Z</updated>
  <id>https://levirve.github.io/</id>
  
  <author>
    <name>Salas (leVirve)</name>
    <email>gae.m.project@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Travis CI 自動發布 hexo 到 Github pages</title>
    <link href="https://levirve.github.io/2016/hexo-deploy-through-travisci/"/>
    <id>https://levirve.github.io/2016/hexo-deploy-through-travisci/</id>
    <published>2016-08-16T11:06:47.000Z</published>
    <updated>2016-08-16T16:01:29.793Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 雖然已經提供很好的指令來更新和發布文章，但是仍然嫌<strong>不夠懶人</strong>啊 XDD</p>
<p>-<br>  <strong>認真原因：</strong> 原本的作法只能讓產生檔案後的靜態 HTML/CSS/Javascript 等內容放到 Github 上，然後透過 Github pages 自動展示網頁 (也就是目前看到的 blog)。但這樣無法將原始文字檔 （raw <code>Markdown</code> documents），設定檔 （config） 保存在遠端，就失去部分使用 Github 等 remote repository 的意義了。<br>-</p>
<h2 id="原始方法"><a href="#原始方法" class="headerlink" title="原始方法"></a>原始方法</h2><p>只有單一分支 (master)，並手動產生靜態檔然後透過 git 提交發布靜態檔上的變更。</p>
<p>原本使用 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a> 來發布，只需要底下這些設定。當然必須先自行設定好 Github SSH Key 或者 Personal Access Token），兩者 URL 分別長這樣：</p>
<ul>
<li><strong>Github SSH Key:</strong> for <code>git@github.com:leVirve/leVirve.github.io.git</code></li>
<li><strong>Personal Access Token:</strong> for <code>https://$DEPLOY_TOKEN@github.com/leVirve/leVirve.github.io.git</code></li>
</ul>
<p>這邊我選擇使用 ssh key 方法的 Repo. URL，因為平常就有一把在 Github 操作用的 key。</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line"></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> git@github.com:leVirve/leVirve.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div><div class="line"><span class="attr">  message:</span> push by hexo-deploy</div><div class="line"></div></pre></td></tr></table></figure>
<p>然後打開 terminal 快樂地打上兩行指令就完成文章更新和發布了！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate  <span class="comment"># 可縮寫成 =&gt; hexo g</span></div><div class="line">hexo deploy    <span class="comment"># 可縮寫成 =&gt; hexo d</span></div></pre></td></tr></table></figure>
<p>兩行指令還不夠簡單嗎？！？！原本我也覺得指令已經這麼簡單又有縮寫，幹嘛再去折騰弄一堆奇技。</p>
<a id="more"></a>
<p>直到某天開始，吃飽沒事就重灌、換系統，身為一個XXX，一個月重灌個幾次也很正常沒什麼嘛 (ﾟ3ﾟ)～♪</p>
<p>p.s. 其實都上面這個不是主因，是因為我常常手滑就把 Node.js 移除了，想說又沒怎麼在寫 node.js 然後 npm module 也順手清乾淨 XDDD<br>p.s. 然後曾經有次忘了備份，文章 source markdown 遺失了幾篇… =&gt; 論遠端版控倉儲的必要性</p>
<h2 id="新時代的作法"><a href="#新時代的作法" class="headerlink" title="新時代的作法"></a>新時代的作法</h2><p>兩個分支： 靜態頁面 (master) + 原始檔 (raw)，每次原始檔一有變更就透過 Travis <strong>自動</strong> 從 <code>raw</code> 產生靜態檔後直接提交變更至 <code>master</code>。</p>
<p>原本的靜態檔 在 master，變成兩個分支是怎樣的狀況？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout -b raw</div><div class="line">git add --all</div><div class="line">gti commit -m <span class="string">"Push all my blog sources onto the cloud!"</span></div><div class="line">git push origin raw</div></pre></td></tr></table></figure>
<p>就是再推一個完全不相干的 branch 上去啦哈哈哈 （此處 <code>git v1.9</code> 之前的似乎要加參數才能讓　unrelated braches 共存）<br>這麼胡來的手法真的沒問題嗎？<a href="http://magicse7en.github.io/2016/03/27/travis-ci-auto-deploy-hexo-github/#%E9%85%8D%E7%BD%AE-travis-yml" target="_blank" rel="external">有人</a>這麼做，那權且試試吧！</p>
<img src="/2016/hexo-deploy-through-travisci/branches.png" alt="嗯就是兩條平行線　ヽ(✿ﾟ▽ﾟ)ノ" title="嗯就是兩條平行線　ヽ(✿ﾟ▽ﾟ)ノ">
<h3 id="先到-Github-產生-Personal-Access-Tokens"><a href="#先到-Github-產生-Personal-Access-Tokens" class="headerlink" title="先到 Github 產生 Personal Access Tokens"></a>先到 Github 產生 Personal Access Tokens</h3><p>因為 push 須要有使用者權限，而又不想將完整的 credential 交給第三方使用；所以利用簡易授權 token 的方式來限定使用範圍，就好像身分證影本會加註說限XX使用一樣（哈這樣比喻對嗎？）</p>
<p>到 Github <code>settings</code> 裡申請一個 <code>Personal Access Token</code>，scope 權限就 <code>repo</code> all 跟 <code>user:email</code> 就好，然後 generate。</p>
<ul>
<li><code>repo</code> scope 也可能只須第二項 <code>reepo_deployment</code>，並未進一步測試。</li>
<li>這個 <code>token</code> 請好好保存，不要隨便公開；萬一掉了可以重新產生 (regenerate)。</li>
</ul>
<img src="/2016/hexo-deploy-through-travisci/github_token.png" alt="Personal Access Token" title="Personal Access Token">
<h3 id="Travis-CI-console-設定"><a href="#Travis-CI-console-設定" class="headerlink" title="Travis CI console 設定"></a>Travis CI console 設定</h3><p>剛剛申請的 token 是為了給 Travis 在最後階段發布時有 push 到 <code>master</code> 的權限，而且又不想讓 token 外洩所以利用 travis 環境變數設定的方式將資訊透漏給 travis 執行中的實體。</p>
<ul>
<li>到相應的 repository <code>settings</code> 底下，把剛剛產生的 token 新增進 Travis 環境變數，這邊的環境變數我取名為 <code>DEPLOY_TOKEN</code>。</li>
</ul>
<img src="/2016/hexo-deploy-through-travisci/travis_console.png" alt="Travis CI settings" title="Travis CI settings">
<h3 id="Travis-CI-執行設定：Your-travis-yml-config"><a href="#Travis-CI-執行設定：Your-travis-yml-config" class="headerlink" title="Travis CI 執行設定：Your .travis.yml config"></a>Travis CI 執行設定：Your .travis.yml config</h3><p>附上我的 <code>.travis.yml</code> 做為參考，整個建構流程分三步：取得歷史（fetch old commits history），產生檔案（<code>hexo</code> generate static files），發布結果（<code>git push</code> changes of static files to <code>master</code>）</p>
<p><strong>必須要先確定 hexo 相關相依都有紀錄在 package.json</strong>，sample: <a href="https://github.com/leVirve/leVirve.github.io/blob/raw/package.json" target="_blank" rel="external">package.json</a></p>
<ul>
<li><p><code>before_script</code>: 在所有建置動作之前，先把 <code>master</code> 分支 (也就是最後 blog 靜態頁面) clone 到 <code>./public</code> 資料夾 (<code>hexo generate</code> 會預設產生結果到這裡)。目的是為了<strong>保留之前的 <code>commits</code> 紀錄</strong>，讓本次的新結果作為最新 <code>commit</code> 提交出去。</p>
</li>
<li><p><code>script</code>: 雖然是透過 npm run build，不過實際上就是 <code>hexo generate</code> (可以參閱我的 <a href="https://github.com/leVirve/leVirve.github.io/blob/raw/package.json#L9" target="_blank" rel="external">package.json</a> 設定)</p>
</li>
<li><p><code>after_success</code>: 在成功之後，準備將本次改變 (changes) 提交出去 (commit)。build 完的成果在 <code>./public</code>，然後照著一般 <code>git</code> 提交方法操作，最後透過 <code>DEPLOY_TOKEN</code> (從 Github 產生的 personal access token，並加入 travis 環境變數) <code>git push</code> 到 <code>master</code> 分支上。</p>
</li>
<li><p>完工 (ゝ∀･)b！ 記得加上 Line#26 確保 travis build 只 run 有原始碼這個 branch 喔～</p>
</li>
</ul>
<figure class="highlight yaml"><figcaption><span>.travis.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="attr">language:</span> node_js</div><div class="line"></div><div class="line"><span class="attr">node_js:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">"6"</span></div><div class="line"></div><div class="line"><span class="attr">cache:</span></div><div class="line"><span class="attr">  directories:</span></div><div class="line"><span class="bullet">    -</span> node_modules</div><div class="line"></div><div class="line"><span class="attr">before_script:</span></div><div class="line"><span class="bullet">  -</span> git clone --branch master https://github.com/leVirve/leVirve.github.io public</div><div class="line"></div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">  -</span> npm run build</div><div class="line"></div><div class="line"><span class="attr">after_success:</span></div><div class="line"><span class="bullet">  -</span> cd public</div><div class="line"><span class="bullet">  -</span> git config user.name <span class="string">"leVirve@Travis"</span> </div><div class="line"><span class="bullet">  -</span> git config user.email <span class="string">"gae.m.project@gmail.com"</span></div><div class="line"><span class="bullet">  -</span> git add --all .</div><div class="line"><span class="bullet">  -</span> git commit -m <span class="string">"Travis CI Auto Builder"</span></div><div class="line"><span class="bullet">  -</span> git push https://$DEPLOY_TOKEN@github.com/leVirve/leVirve.github.io.git master</div><div class="line"></div><div class="line"><span class="attr">branches:</span></div><div class="line"><span class="attr">  only:</span></div><div class="line"><span class="bullet">    -</span> raw</div></pre></td></tr></table></figure>
<h3 id="Continuous-delivery-持續交付-d-d＇∀＇"><a href="#Continuous-delivery-持續交付-d-d＇∀＇" class="headerlink" title="Continuous delivery 持續交付 d(d＇∀＇)"></a>Continuous delivery 持續交付 d(d＇∀＇)</h3><p>所以現在只要寫了一篇文章，然後把內容 commit 到 <code>raw</code> branch 就會自動透過 travis 建置並發布到 <code>master</code> 分支上（也就是 xxxxx.github.io 顯示的靜態頁面）。</p>
<p>這有比剛剛那兩行 hexo 指令方便嗎？？？<br>.<br>.<br>.<br>.<br>.<br><strong>並沒有</strong> XDDD 若單比較指令長度，git commit 一次就要打一大堆字</p>
<p>但是好處（side effects）是：</p>
<ul>
<li><p>不用 <del>怕我手滑</del> 安裝 node.js 和 <code>hexo</code> 以及他的相依 modules 好夥伴</p>
<ul>
<li>到哪都能寫，只要我能下 <code>git</code> commands，誰都別想攔我！</li>
<li>就算沒有 <code>git</code> commands，還能直接開 Github 網頁登入之後新增檔案到 <code>raw</code> branch，網頁直接 commit！</li>
<li>用手機或平板登入 Github 網頁發個文也是 OK 唷！</li>
</ul>
</li>
<li><p>跟上潮流，CI / CD 就是潮</p>
<ul>
<li>既然有自動化工具，而且 BOT 不會忘記指令不會打錯字，幹嘛繼續當模仿工具做事的人？</li>
<li>做個堂堂正正使用工具的好青年 (`・ω・´)</li>
</ul>
</li>
</ul>
<p><strong>我就只是放假無聊，找個習題做做 練習個 travis 自動集成、自動交付也是不錯的 ξ( ✿＞◡❛)</strong></p>
<h3 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions (?)"></a>Contributions (?)</h3><p>底下附了兩篇在設定時所參考的文章，不過我認為本篇使用了 brand new method (笑) 以及<strong>更簡單更少</strong>的設定完成目標！<br>不過或許要考慮在 Travis 使用 <a href="https://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables" target="_blank" rel="external">Encrypted-Variables</a> 來確保環境變數更安全 (っ・Д・)っ</p>
<h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/" target="_blank" rel="external">使用 Travis CI 自动更新 GitHub Pages</a><br><a href="http://magicse7en.github.io/2016/03/27/travis-ci-auto-deploy-hexo-github/" target="_blank" rel="external">使用Travis CI自动构建hexo博客</a><br><a href="https://github.com/tommy351/tommy351.github.io/blob/source/.travis.yml" target="_blank" rel="external">Hexo 作者的 .travis.yml</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 雖然已經提供很好的指令來更新和發布文章，但是仍然嫌&lt;strong&gt;不夠懶人&lt;/strong&gt;啊 XDD&lt;/p&gt;
&lt;p&gt;-&lt;br&gt;  &lt;strong&gt;認真原因：&lt;/strong&gt; 原本的作法只能讓產生檔案後的靜態 HTML/CSS/Javascript 等內容放到 Github 上，然後透過 Github pages 自動展示網頁 (也就是目前看到的 blog)。但這樣無法將原始文字檔 （raw &lt;code&gt;Markdown&lt;/code&gt; documents），設定檔 （config） 保存在遠端，就失去部分使用 Github 等 remote repository 的意義了。&lt;br&gt;-&lt;/p&gt;
&lt;h2 id=&quot;原始方法&quot;&gt;&lt;a href=&quot;#原始方法&quot; class=&quot;headerlink&quot; title=&quot;原始方法&quot;&gt;&lt;/a&gt;原始方法&lt;/h2&gt;&lt;p&gt;只有單一分支 (master)，並手動產生靜態檔然後透過 git 提交發布靜態檔上的變更。&lt;/p&gt;
&lt;p&gt;原本使用 &lt;a href=&quot;https://github.com/hexojs/hexo-deployer-git&quot;&gt;hexo-deployer-git&lt;/a&gt; 來發布，只需要底下這些設定。當然必須先自行設定好 Github SSH Key 或者 Personal Access Token），兩者 URL 分別長這樣：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Github SSH Key:&lt;/strong&gt; for &lt;code&gt;git@github.com:leVirve/leVirve.github.io.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Personal Access Token:&lt;/strong&gt; for &lt;code&gt;https://$DEPLOY_TOKEN@github.com/leVirve/leVirve.github.io.git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊我選擇使用 ssh key 方法的 Repo. URL，因為平常就有一把在 Github 操作用的 key。&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;_config.yml&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Deployment&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## Docs: http://hexo.io/docs/deployment.html&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;deploy:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  repo:&lt;/span&gt; git@github.com:leVirve/leVirve.github.io.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  branch:&lt;/span&gt; master&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  message:&lt;/span&gt; push by hexo-deploy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然後打開 terminal 快樂地打上兩行指令就完成文章更新和發布了！&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo generate  &lt;span class=&quot;comment&quot;&gt;# 可縮寫成 =&amp;gt; hexo g&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo deploy    &lt;span class=&quot;comment&quot;&gt;# 可縮寫成 =&amp;gt; hexo d&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;兩行指令還不夠簡單嗎？！？！原本我也覺得指令已經這麼簡單又有縮寫，幹嘛再去折騰弄一堆奇技。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://levirve.github.io/tags/Hexo/"/>
    
      <category term="Travis" scheme="https://levirve.github.io/tags/Travis/"/>
    
  </entry>
  
  <entry>
    <title>Dcard 爬蟲於 Python 實作成果：dcard-spider</title>
    <link href="https://levirve.github.io/2016/dcard-spider-python-package/"/>
    <id>https://levirve.github.io/2016/dcard-spider-python-package/</id>
    <published>2016-07-30T17:24:44.000Z</published>
    <updated>2016-08-16T16:01:29.789Z</updated>
    
    <content type="html"><![CDATA[<p>上次談到了 Dcard 現在官方實際 production 中使用的 API URL 規則，並且撰寫了簡單的 Python scripts 來取得小部分資料。<br>而這樣的成果適合用來做小規模的後續應用，例如特定版的當日或當月文章分析等等；然而若是要拿下全站的資料，那麼我們上次的程式範例本身必須要改善來讓後續方便擴充（其實是上次程式趕工寫太醜，生理上不能接受(?) 完全沒有想要直接沿用的念頭 XD）。</p>
<p>那麼接下來的概念就是：</p>
<ol>
<li><p>我要一隻大蜘蛛（比起 crawler，我選擇 Spider！聽起來就比較猛，以下都用 spider 稱呼這隻網路爬蟲 顆顆）</p>
<img src="/2016/dcard-spider-python-package/Giant_spider_strikes.jpg" alt="[Giant spider strikes from wiki]" title="[Giant spider strikes from wiki]">
</li>
<li><p>那除了核心的軀幹之外需要先造八隻 <del>蟹</del> 腳啊！上次那個品質．．．可是撐不起這隻巨型蜘蛛的</p>
</li>
<li><p>不知所云，總之就是把之前的概念打造成好用的腿就對了。之後蜘蛛好辦事！</p>
</li>
</ol>
<p>成果已經發布在 <a href="https://pypi.python.org/pypi/dcard-spider" target="_blank" rel="external">PyPI</a> 以及 <a href="https://github.com/leVirve/dcard-spider" target="_blank" rel="external">Github</a> 上了。</p>
<a id="more"></a>
<h2 id="懶人包，我就先安裝再說"><a href="#懶人包，我就先安裝再說" class="headerlink" title="懶人包，我就先安裝再說"></a>懶人包，我就先安裝再說</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install dcard-spider</div></pre></td></tr></table></figure>
<p>但是 <a href="https://pypi.python.org/pypi/dcard-spider" target="_blank" rel="external">dcard-spdier@PyPi</a> 不保證有以下說的最新功能唷，因為沒有隨時發布最新的上去 XDD</p>
<h2 id="懶人包，我就勤勞一點到-Github-裝新版"><a href="#懶人包，我就勤勞一點到-Github-裝新版" class="headerlink" title="懶人包，我就勤勞一點到 Github 裝新版"></a>懶人包，我就勤勞一點到 Github 裝新版</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/leVirve/dcard-spider</div><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<p>裝好之後，可以先照著 README 裡的 <code>command line</code> 試試下載圖片功能，或是用 <code>program</code> 跑 sample 看看效果如何。那麼以下分享我的 Python package（套件）程式架構：</p>
<h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><p>先定義一個 <code>Dcard</code> 類別來描述整個套件應該有的子功能，例如目前支援 <code>forums</code> 跟 <code>posts</code> 兩個 API，所以我定義了兩個子類別負責各自功能。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" dcard.py """</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> dcard.forums <span class="keyword">import</span> Forum</div><div class="line"><span class="keyword">from</span> dcard.posts <span class="keyword">import</span> Post</div><div class="line"><span class="keyword">from</span> dcard.utils <span class="keyword">import</span> Client</div><div class="line"></div><div class="line">__all__ = [<span class="string">'Dcard'</span>]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dcard</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(workers=<span class="number">8</span>)</span>:</span></div><div class="line">        self.client = Client(workers=workers)</div><div class="line">        self.forums = Forum(client=self.client)</div><div class="line">        self.posts = Post(client=self.client)</div></pre></td></tr></table></figure>
<h3 id="看板文章相關資訊-Forum-layer"><a href="#看板文章相關資訊-Forum-layer" class="headerlink" title="看板文章相關資訊 (Forum-layer)"></a>看板文章相關資訊 (Forum-layer)</h3><ul>
<li><p>在 <code>Forum</code> 中主要有兩個對外（作為套件提供給外部呼叫）的方法</p>
<ol>
<li><p><code>get()</code> 作為實例方法 (instance method)</p>
<ul>
<li><p>用來取得 <code>Dcard</code> 上各個看板的後設資訊 (metadata)，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">metadata_forums = dcard.forums.get()</div></pre></td></tr></table></figure>
</li>
<li><p>API 取得的結果是 <code>json</code> 的 list，原始資料大概長這樣：（但在程式裡就變成 list of <code>dict</code>）</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  ...,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"c82dae3f-28ba-4aae-961d-c754e6ccd37a"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"手作"</span>,</div><div class="line">    <span class="attr">"description"</span>: <span class="string">"供討論、分享、詢問各種手作、非文字創作品，非相關話題會刪除該文"</span>,</div><div class="line">    <span class="attr">"alias"</span>: <span class="string">"handicrafts"</span>,</div><div class="line">    <span class="attr">"fullyAnonymous"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"subscriptionCount"</span>: <span class="number">2893</span>,</div><div class="line">    <span class="attr">"invisible"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"isSchool"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"read"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"subscribed"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"ignorePost"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"canPost"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"createdAt"</span>: <span class="string">"2016-05-17T11:15:15.714Z"</span>,</div><div class="line">    <span class="attr">"updatedAt"</span>: <span class="string">"2016-07-15T10:50:49.208Z"</span></div><div class="line">  &#125;, ...</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>有提供參數 <code>no_school</code> 調整要不要學校看板的資訊，從上面的 <code>json</code> 格式看得出 <code>isSchool</code> 給我們足夠的訊息來判斷</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">metadata_forums = dcard.forums.get()  <span class="comment"># 取得所有看板</span></div><div class="line">metadata_forums = dcard.forums.get(no_school=<span class="keyword">True</span>)  <span class="comment"># 過濾掉學校看板</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>get_metas()</code> 是實例方法 (instance method)</p>
<ul>
<li><p>用來取得各篇文章的後設資訊 (metadata)，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">forum = dcard.forums(<span class="string">'funny'</span>)</div><div class="line">forum.get_metas()</div></pre></td></tr></table></figure>
</li>
<li><p>API 取得的結果同樣是 <code>json</code> 的 list，原始資料大概長這樣：（程式裡就是 list of <code>dict</code>）</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  ...</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"tags"</span>: [<span class="string">"老爸"</span>, <span class="string">"三本"</span>, <span class="string">"罵人"</span>],</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"老爸，不是這樣的吧！😂"</span>,</div><div class="line">    <span class="attr">"forumName"</span>: <span class="string">"有趣"</span>,</div><div class="line">    <span class="attr">"anonymousSchool"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"forumAlias"</span>: <span class="string">"funny"</span>,</div><div class="line">    <span class="attr">"createdAt"</span>: <span class="string">"2016-07-15T10:57:02.876Z"</span>,</div><div class="line">    <span class="attr">"school"</span>: <span class="string">"中山大學"</span>,</div><div class="line">    <span class="attr">"commentCount"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"updatedAt"</span>: <span class="string">"2016-07-15T10:57:02.876Z"</span>,</div><div class="line">    <span class="attr">"forumId"</span>: <span class="string">"a1aaa6e6-2594-4968-b7dc-e1b14bea96f4"</span>,</div><div class="line">    <span class="attr">"likeCount"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"excerpt"</span>: <span class="string">"雖然家在高雄但由於下學期比較忙所以也很少回家\n（這好像不是重點😂）\n-\n放暑假後當然沒事就趕緊回家啦！\n前幾天看到老爸在看電視，突然聽到一陣大笑\n「哈哈哈哈，五十六啊，哈哈哈哈」\n-\n我心裡想，蛤五"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">224362465</span>,</div><div class="line">    <span class="attr">"anonymousDepartment"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"pinned"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"department"</span>: <span class="string">"企業管理學系"</span>,</div><div class="line">    <span class="attr">"replyId"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"gender"</span>: <span class="string">"M"</span>,</div><div class="line">    <span class="attr">"replyTitle"</span>: <span class="literal">null</span></div><div class="line">  &#125;, ...</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>提供豐富的參數調控，讓之後的專案開發更便利（之後的 <code>dcard-lumberjack</code> 專案大量使用此方法的參數設定）。</p>
<ul>
<li><code>num</code>: 取得幾篇的文章後設資訊 (metadata of post)。 / 預設: 30篇</li>
<li><code>sort</code>: <code>popular</code> / <code>new</code>，決定用什麼排序方法查詢 (sorted by)，最新或最熱門排序。 / 預設: <code>&#39;new&#39;</code></li>
<li><code>timebound</code>: <code>&#39;{ISO-8601 時間字串}&#39;</code>，若用 <code>new</code> 來排序查詢的話，要查詢到多早。（使用 UTC 時間，依照<a href="https://zh.wikipedia.org/wiki/ISO_8601" target="_blank" rel="external">ISO-8601</a>表示法轉成字串） / 預設: <code>&#39;&#39;</code>（空字串）</li>
<li><code>callback</code>: 不直接回傳 metas，會先套用此函式再回傳 <code>callback_function</code> 的最終值，可當作一種 reducer，減少資料複雜度。 / 預設: None<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="string">''' example scenarios '''</span></div><div class="line">forum = Forum(<span class="string">'studyabroad'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 1. 取得看板熱門 500 篇            </span></div><div class="line">metas = forum.get_metas(num=<span class="number">500</span>, sort=<span class="string">'popular'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2. 取得看板近 1000 篇中，likeCount 夠多的</span></div><div class="line"><span class="function"><span class="keyword">def</span> 保留很多讚的文章<span class="params">(metas)</span>:</span></div><div class="line">    <span class="keyword">return</span> [meta <span class="keyword">for</span> meta <span class="keyword">in</span> metas <span class="keyword">if</span> meta[<span class="string">'likeCount'</span>] &gt;= <span class="number">50</span>]</div><div class="line">metas = forum.get_metas(num=<span class="number">1000</span>, callback=保留很多讚的文章)</div><div class="line"></div><div class="line"><span class="comment"># 3. 取得 無限多篇 文章資訊，直到該板無文章</span></div><div class="line">metas = forum.get_metas(num=forums.infinite_page)</div><div class="line"></div><div class="line"><span class="comment"># 4. 取得日期在 最近三個月 的文章資訊</span></div><div class="line">boundary_date = datetime.datetime.utcnow() - datetime.timedelta(months=<span class="number">3</span>)</div><div class="line">metas = forum.get_metas(</div><div class="line">            num=forums.infinite_page, timebound=boundary_date.isoformat())</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="Forums-full-code"><a href="#Forums-full-code" class="headerlink" title="Forums full code"></a>Forums full code</h4><p>這邊附上 <code>dcard/forums.py</code> 部分實作程式碼以及解說。</p>
<ul>
<li>一些常數定義<ul>
<li><code>metas_per_page</code> 是 <code>Dcard</code> API 的 spec</li>
<li>另外頁數都應該是大於等於零的整數，所以將 <code>infinite_page</code> 模式定為常數 -1</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" forums.py """</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forum</span>:</span></div><div class="line">    metas_per_page = <span class="number">30</span></div><div class="line">    infinite_page = <span class="number">-1</span></div></pre></td></tr></table></figure>
<ul>
<li>這邊可以看到各項參數的實際使用狀況；尤其是 <code>callback</code> 參數實際在 package 裡的使用時機。<br>也就是在回傳結果之前，如果有定義 <code>callback</code> 的話就先呼叫並將 <code>callback</code>的結果作為最終 <code>results</code> (@<code>Line#8</code>)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_metas</span><span class="params">(self, num=<span class="number">30</span>, sort=<span class="string">'new'</span>, before=None, timebound=None, callback=None)</span>:</span></div><div class="line">    logger.info(<span class="string">'&lt;%s&gt; 開始取得看板內文章資訊'</span>, self.name)</div><div class="line"></div><div class="line">    paged_metas = self.get_paged_metas(sort, num, before, timebound)</div><div class="line">    buff = flatten_lists(metas <span class="keyword">for</span> metas <span class="keyword">in</span> paged_metas)</div><div class="line"></div><div class="line">    results = callback(buff) <span class="keyword">if</span> callback <span class="keyword">else</span> buff</div><div class="line"></div><div class="line">    logger.info(<span class="string">'&lt;%s&gt; 資訊蒐集完成，共%d筆'</span>, self.name, len(buff))</div><div class="line">    <span class="keyword">return</span> results</div></pre></td></tr></table></figure>
<ul>
<li>這個是 <code>get_meta()</code> 實際負責各項判斷及處理 API 資料回傳回來的實際 <code>generator</code>。<br>其中有幾個內部的 inner method:<ul>
<li><code>eager_for_metas()</code> + <code>get_single_page_metas()</code>: 前者決定是否要繼續要資料，後者是負責送出請求的 generator。</li>
<li><code>filter_metas()</code>: 過濾並僅保留需要的資料。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_paged_metas</span><span class="params">(self, sort, num, before, timebound=<span class="string">''</span>)</span>:</span></div><div class="line">    params = &#123;<span class="string">'popular'</span>: sort == <span class="string">'popular'</span>, <span class="string">'before'</span>: before&#125;</div><div class="line">    pages = -(-num // self.metas_per_page)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_metas</span><span class="params">(metas)</span>:</span></div><div class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span> <span class="keyword">and</span> page == pages:</div><div class="line">            metas = metas[:num - (pages - <span class="number">1</span>) * self.metas_per_page]</div><div class="line">        <span class="keyword">if</span> timebound:</div><div class="line">            metas = [m <span class="keyword">for</span> m <span class="keyword">in</span> metas <span class="keyword">if</span> m[<span class="string">'updatedAt'</span>] &gt; timebound]</div><div class="line">        <span class="keyword">return</span> metas</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eager_for_metas</span><span class="params">(bundle)</span>:</span></div><div class="line">        page, metas = bundle</div><div class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span> <span class="keyword">and</span> page == pages + <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> len(metas) == <span class="number">0</span>:</div><div class="line">            logger.warning(<span class="string">'[%s] 已到最末頁，第%d頁!'</span>, self.name, page)</div><div class="line">        <span class="keyword">return</span> len(metas) != <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_single_page_metas</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">yield</span> self.client.get_json(self.posts_meta_url, params=params)</div><div class="line"></div><div class="line">    paged_metas = zip(count(start=<span class="number">1</span>), get_single_page_metas())</div><div class="line"></div><div class="line">    <span class="keyword">for</span> page, metas <span class="keyword">in</span> takewhile(eager_for_metas, paged_metas):</div><div class="line">        params[<span class="string">'before'</span>] = metas[<span class="number">-1</span>][<span class="string">'id'</span>]</div><div class="line">        metas = filter_metas(metas)</div><div class="line">        <span class="keyword">if</span> len(metas) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">yield</span> metas</div></pre></td></tr></table></figure>
<p>以上就是負責處理 <code>看板 (Forums)</code> 的 module。</p>
<h3 id="文章內容相關資訊-Post-layer"><a href="#文章內容相關資訊-Post-layer" class="headerlink" title="文章內容相關資訊 (Post-layer)"></a>文章內容相關資訊 (Post-layer)</h3><ul>
<li><p>在 <code>Posts</code> 中主只有一個對外（作為套件提供給外部呼叫）的方法</p>
<ul>
<li><p>不過並不是直接呼叫使用，使用前先填入參數，可以自動判別兩種提供的資訊 (<code>meta</code> 或 <code>id</code>) 來取得文章內容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" list of metas """</span></div><div class="line">metas = dcard.forum(<span class="string">'whysoserious'</span>).get()</div><div class="line"></div><div class="line"><span class="string">""" list of ids """</span></div><div class="line">ids = [meta[<span class="string">'id'</span>] <span class="keyword">for</span> meta <span class="keyword">in</span> metas]</div><div class="line"></div><div class="line">articles = dcard.posts(metas)</div><div class="line"><span class="comment"># or</span></div><div class="line">articles = dcard.posts(ids)</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p><code>get(self, content=True, links=True, comments=True)</code>:</p>
<ul>
<li>用來取得文章資料，而三項參數分別代表是否要取得文章內容、引用連結和該篇文章的留言。</li>
<li><p>其實作底下又分為三個部分: <code>get_content</code>, <code>get_links</code>, <code>get_comments</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(self, post_ids)</span>:</span></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        self.client.get(api.post_url_pattern.format(post_id=post_id))</div><div class="line">        <span class="keyword">for</span> post_id <span class="keyword">in</span> post_ids</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_links</span><span class="params">(self, post_ids)</span>:</span></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        self.client.get(api.post_links_url_pattern.format(post_id=post_id))</div><div class="line">        <span class="keyword">for</span> post_id <span class="keyword">in</span> post_ids</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments</span><span class="params">(self, post_ids, post_metas)</span>:</span></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        self.get_comments_parallel(meta[<span class="string">'id'</span>], meta[<span class="string">'commentCount'</span>])</div><div class="line">        <span class="keyword">for</span> meta <span class="keyword">in</span> post_metas</div><div class="line">    ) <span class="keyword">if</span> post_metas <span class="keyword">else</span> (</div><div class="line">        self.get_comments_serial(post_id)</div><div class="line">        <span class="keyword">for</span> post_id <span class="keyword">in</span> post_ids</div><div class="line">    )</div></pre></td></tr></table></figure>
</li>
<li><p><code>get_content</code>, <code>get_links</code> 很容易做到平行化 (parallel) 或並行 (concurrent) 執行來加快取得大量文章的效率 (throughput)。</p>
</li>
<li><p>比較麻煩的是 <code>get_comments</code>，因為前面提到 <code>Posts</code> 能同時吃 <code>metas</code> 和 <code>ids</code> 兩種參數，所以在取得留言上分兩種策略：</p>
<ul>
<li>提供 <code>id</code> 的情況：對多篇分別循序取得文章留言 (<code>get_comments_serial</code>)</li>
<li>提供 <code>meta</code> 的情況：對多篇分別並行取得文章留言 (<code>get_comments_parallel</code>)<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments_serial</span><span class="params">(self, post_id)</span>:</span></div><div class="line">    comments_url = api.post_comments_url_pattern.format(post_id=post_id)</div><div class="line">    params = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_cmts</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">yield</span> self.client.get_json(comments_url, params=params)</div><div class="line"></div><div class="line">    comments = []</div><div class="line">    <span class="keyword">for</span> cmts <span class="keyword">in</span> takewhile(<span class="keyword">lambda</span> x: len(x), gen_cmts()):</div><div class="line">        comments += cmts</div><div class="line">        params[<span class="string">'after'</span>] = cmts[<span class="number">-1</span>][<span class="string">'floor'</span>]</div><div class="line">    <span class="keyword">return</span> comments</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments_parallel</span><span class="params">(self, post_id, comments_count)</span>:</span></div><div class="line">    pages = -(-comments_count // self.comments_per_page)</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        self.client.get(</div><div class="line">            api.post_comments_url_pattern.format(post_id=post_id),</div><div class="line">            params=&#123;<span class="string">'after'</span>: page * self.comments_per_page&#125;)</div><div class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(pages)</div><div class="line">    )</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>而 <code>dcard.posts(metas).get()</code> 回傳的是一個 <code>generator</code>，裡面的資訊結構長這樣子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> article <span class="keyword">in</span> dcard.posts(metas).get():</div><div class="line">    print(artile)</div></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"comments"</span>: [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"reportReason"</span>: <span class="string">""</span>,</div><div class="line">        <span class="attr">"school"</span>: <span class="string">"逢甲大學"</span>,</div><div class="line">        <span class="attr">"createdAt"</span>: <span class="string">"2016-07-15T11:06:29.029Z"</span>,</div><div class="line">        <span class="attr">"hidden"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"anonymous"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"floor"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"updatedAt"</span>: <span class="string">"2016-07-15T11:06:29.029Z"</span>,</div><div class="line">        <span class="attr">"postId"</span>: <span class="number">224362498</span>,</div><div class="line">        <span class="attr">"likeCount"</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"587c62b2-70be-4469-8f3a-641705606e54"</span>,</div><div class="line">        <span class="attr">"host"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"你錯了，臉很重要。"</span>,</div><div class="line">        <span class="attr">"gender"</span>: <span class="string">"M"</span></div><div class="line">    &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"links"</span>: &#123;&#125;,</div><div class="line">    <span class="attr">"content"</span>: &#123;</div><div class="line">        <span class="attr">"tags"</span>: [<span class="string">"卡友"</span>,　<span class="string">"畫素"</span>,　<span class="string">"百萬"</span>,　<span class="string">"幾十萬"</span>,　<span class="string">"加油吧"</span>],</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"加油吧！卡友們"</span>,</div><div class="line">        <span class="attr">"forumName"</span>: <span class="string">"有趣"</span>,</div><div class="line">        <span class="attr">"anonymousSchool"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"forumAlias"</span>: <span class="string">"funny"</span>,</div><div class="line">        <span class="attr">"createdAt"</span>: <span class="string">"2016-07-15T11:04:12.795Z"</span>,</div><div class="line">        <span class="attr">"replyTitle"</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">"school"</span>: <span class="string">"勤益科大"</span>,</div><div class="line">        <span class="attr">"content"</span>: <span class="string">"回想這幾年，我嚐盡社會的辛酸艱難\n從一開始\n什麼都沒有到了幾十萬\n再從幾十萬到百萬\n百萬再到千萬\n最後千萬到現在的2100萬\n我不是要炫耀\n只是想透過自己的經歷告訴大家\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n手機畫素越高，照片越好看😏😏😏"</span>,</div><div class="line">        <span class="attr">"commentCount"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"updatedAt"</span>: <span class="string">"2016-07-15T11:06:45.664Z"</span>,</div><div class="line">        <span class="attr">"forumId"</span>: <span class="string">"a1aaa6e6-2594-4968-b7dc-e1b14bea96f4"</span>,</div><div class="line">        <span class="attr">"likeCount"</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">"excerpt"</span>: <span class="string">"回想這幾年，我嚐盡社會的辛酸艱難\n從一開始\n什麼都沒有到了幾十萬\n再從幾十萬到百萬\n百萬再到千萬\n最後千萬到現在的2100萬\n我不是要炫耀\n只是想透過自己的經歷告訴大家\n.\n.\n.\n.\n.\n.\n.\n."</span>,</div><div class="line">        <span class="attr">"id"</span>: <span class="number">224362498</span>,</div><div class="line">        <span class="attr">"anonymousDepartment"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"pinned"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"replyId"</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">"gender"</span>: <span class="string">"M"</span>,</div><div class="line">        <span class="attr">"deletedAt"</span>: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>以上就是負責處理 文章 (Posts) 的 module。</p>
<h3 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h3><p>說那麼多，不如實際看看如何使用。</p>
<ul>
<li>範例情境 1: 想要看看有趣版一天裡夠熱門 (likes 數多於 100) 的文章裡，留言的都是什麼學校的人。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"><span class="keyword">from</span> dcard <span class="keyword">import</span> Dcard</div><div class="line"></div><div class="line"></div><div class="line">dcard = Dcard()</div><div class="line"></div><div class="line"><span class="comment"># 用來存放想得到的資訊 =&gt; &#123;'某某學校': $&#123;多少留言數&#125;, ...&#125;</span></div><div class="line">analyzed_result = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>)</div><div class="line"><span class="comment"># 必須使用 UTC 時間，然後訂定搜尋範圍是一天內</span></div><div class="line">target_date = datetime.datetime.utcnow() - datetime.timedelta(days=<span class="number">1</span>) </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_hot</span><span class="params">(metas)</span>:</span></div><div class="line">    <span class="keyword">return</span> [meta <span class="keyword">for</span> meta <span class="keyword">in</span> metas <span class="keyword">if</span> meta[<span class="string">'likeCount'</span>] &gt;= <span class="number">100</span>]</div><div class="line"></div><div class="line">metas = dcard.forums(<span class="string">'funny'</span>).get_metas(</div><div class="line">            num=dcard.forums.infinite_page,  <span class="comment"># 因為沒有明確數量目標 (由時間做為限制條件)，此項設為無限大</span></div><div class="line">            timebound=target_date.isoformat(),  <span class="comment"># 必須將時間轉成 ISO-8601 制的時間字串</span></div><div class="line">            callback=filter_hot  <span class="comment"># 根據條件寫個過濾器</span></div><div class="line">        )</div><div class="line">print(<span class="string">'Collect %d metas'</span> % len(metas))</div><div class="line"></div><div class="line"><span class="comment"># 因為這裡我們只關注留言資訊，其他兩個資訊可以略過</span></div><div class="line">articles = dcard.posts(metas).get(content=<span class="keyword">False</span>, links=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># 分析</span></div><div class="line"><span class="keyword">for</span> article <span class="keyword">in</span> articles.result():</div><div class="line">    <span class="keyword">for</span> comment <span class="keyword">in</span> article[<span class="string">'comments'</span>]:</div><div class="line">        analyzed_result[comment.get(<span class="string">'school'</span>)] += <span class="number">1</span></div><div class="line"></div><div class="line">print(analyzed_result)</div></pre></td></tr></table></figure>
<ul>
<li>結果可能長得像這樣，</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Collect <span class="number">355</span> metas</div><div class="line"></div><div class="line">defaultdict(&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x0</span>xxxxxxxxxxxxxxx&gt;, &#123;</div><div class="line">    <span class="string">'金門大學'</span>: <span class="number">35</span>, <span class="string">'東海大學'</span>: <span class="number">71</span>, <span class="string">'國立成功大學'</span>: <span class="number">4</span>, <span class="string">'大同大學'</span>: <span class="number">9</span>, <span class="string">'玄奘大學'</span>: <span class="number">29</span>,</div><div class="line">    <span class="string">'聖約翰科技大學'</span>: <span class="number">3</span>, <span class="string">'國立高雄應用科技大學'</span>: <span class="number">3</span>, <span class="string">'清華大學'</span>: <span class="number">8</span>, <span class="string">'國立臺北科技大學'</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">'國立高雄師範大學'</span>: <span class="number">3</span>, <span class="string">'國立臺灣藝術大學'</span>: <span class="number">10</span>, ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>同樣的應用，或許也可以到 whysoserious 看看哪個學校最愛發費雯 XDD</p>
<ul>
<li>範例情境 2: 想抓攝影版上最近百篇且 likes 夠高文章內文裡的”圖片”們！</li>
</ul>
<p><strong>程式作法</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> dcard <span class="keyword">import</span> Dcard</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_hot</span><span class="params">(metas)</span>:</span></div><div class="line">    <span class="keyword">return</span> [meta <span class="keyword">for</span> meta <span class="keyword">in</span> metas <span class="keyword">if</span> meta[<span class="string">'likeCount'</span>] &gt;= <span class="number">100</span>]</div><div class="line"></div><div class="line">dcard = Dcard()</div><div class="line"><span class="comment"># 先抓百篇 meta 出來，然後過濾出熱門的</span></div><div class="line">metas = dcard.forums(<span class="string">'photography'</span>).get_metas(num=<span class="number">100</span>, callback=filter_hot)</div><div class="line"><span class="comment"># 因為只想要分析內文裡的圖片 若是連留言回復的圖都要憶起分析，那就將 comments=False 拿掉</span></div><div class="line">posts = dcard.posts(metas).get(comments=<span class="keyword">False</span>, links=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">resources = posts.parse_resources()  <span class="comment"># 開始分析文章內的圖片</span></div><div class="line">fin, fails = posts.download(resources)  <span class="comment"># 下載分析出來的圖片</span></div><div class="line"></div><div class="line">print(<span class="string">'成功下載 %d 項！'</span> % fin <span class="keyword">if</span> len(fails) == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'出了點錯下載不完全喔'</span>)</div></pre></td></tr></table></figure>
<p><strong>指令做法</strong></p>
<p>本 package 提供 <code>command-line</code> 式使用方法唷~ 方便又簡單</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dcard download <span class="_">-f</span> photography -n 100 -likes 100</div></pre></td></tr></table></figure>
<ul>
<li>結果：</li>
</ul>
<img src="/2016/dcard-spider-python-package/snapshot.png" alt="執行成果" title="執行成果">
<p>以上就是我的 dcard-spider 架構分享。若有發現 bugs 或 功能建議歡迎至 Github issues 留言~</p>
<p>Salas / 2016.08</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次談到了 Dcard 現在官方實際 production 中使用的 API URL 規則，並且撰寫了簡單的 Python scripts 來取得小部分資料。&lt;br&gt;而這樣的成果適合用來做小規模的後續應用，例如特定版的當日或當月文章分析等等；然而若是要拿下全站的資料，那麼我們上次的程式範例本身必須要改善來讓後續方便擴充（其實是上次程式趕工寫太醜，生理上不能接受(?) 完全沒有想要直接沿用的念頭 XD）。&lt;/p&gt;
&lt;p&gt;那麼接下來的概念就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我要一隻大蜘蛛（比起 crawler，我選擇 Spider！聽起來就比較猛，以下都用 spider 稱呼這隻網路爬蟲 顆顆）&lt;/p&gt;
&lt;img src=&quot;/2016/dcard-spider-python-package/Giant_spider_strikes.jpg&quot; alt=&quot;[Giant spider strikes from wiki]&quot; title=&quot;[Giant spider strikes from wiki]&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那除了核心的軀幹之外需要先造八隻 &lt;del&gt;蟹&lt;/del&gt; 腳啊！上次那個品質．．．可是撐不起這隻巨型蜘蛛的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不知所云，總之就是把之前的概念打造成好用的腿就對了。之後蜘蛛好辦事！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;成果已經發布在 &lt;a href=&quot;https://pypi.python.org/pypi/dcard-spider&quot;&gt;PyPI&lt;/a&gt; 以及 &lt;a href=&quot;https://github.com/leVirve/dcard-spider&quot;&gt;Github&lt;/a&gt; 上了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://levirve.github.io/tags/Python/"/>
    
      <category term="Spider" scheme="https://levirve.github.io/tags/Spider/"/>
    
  </entry>
  
  <entry>
    <title>Dccard 爬蟲，透過官方API</title>
    <link href="https://levirve.github.io/2016/Dccard-crawler/"/>
    <id>https://levirve.github.io/2016/Dccard-crawler/</id>
    <published>2016-07-12T21:55:44.000Z</published>
    <updated>2016-08-16T16:01:29.789Z</updated>
    
    <content type="html"><![CDATA[<p>原本爬蟲使用 PTT 作為練習標的，但是年輕人好像已經不流行用這個(?)，而且另一方面也不想在頁面 parsing 上花太多功夫。<br>這次想要練習的東西是爬蟲架構以及其他後續應用，而不再拘泥處理資料本身；所以選擇了與 PTT 相似性質且擁有 API 的 Dcard 作為實驗目標。</p>
<a id="more"></a>
<h1 id="網站-API-規則"><a href="#網站-API-規則" class="headerlink" title="網站 API 規則"></a>網站 API 規則</h1><p>網路上流傳多種 <code>Dcard</code> API 與各式 API wrapper 程式套件，不過網站本身似乎在改版中 (看起來是為了因應前端的技術 stack 改變，轉換至 React.js 環境開發吧) 變得大量使用非同步請求 (ajax) 來獲得資料並繪製畫面。所以前述的那些套件及早期公開的 API 幾乎通通失效。</p>
<p>不過重新到網站上透過開發者工具重新觀察便能獲得一些規則，重新組合出網站實際在使用的新版 API。當然這些資訊或許隨著網站改變會失效也不一定 (尤其是 <code>_api</code> 這樣子的命名，明顯是過度產物的感覺)</p>
<p><strong>API root URL</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://dcard.tw/_api/</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>API</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>看板資訊(meta)</strong></td>
<td><code>http://dcard.tw/_api/forums</code></td>
</tr>
<tr>
<td><strong>文章資訊(meta)</strong></td>
<td><code>http://dcard.tw/_api/forums/{看板名稱}/posts</code></td>
</tr>
<tr>
<td><strong>文章內文</strong></td>
<td><code>http://dcard.tw/_api/posts/{文章編號}</code></td>
</tr>
<tr>
<td><strong>文章內引用連結</strong></td>
<td><code>http://dcard.tw/_api/posts/{文章編號}/links</code></td>
</tr>
<tr>
<td><strong>文章內留言</strong></td>
<td><code>http://dcard.tw/_api/posts/{文章編號}/comments</code></td>
</tr>
</tbody>
</table>
<p>＊<code>文章資訊(meta)</code> 與 <code>文章內留言</code> 預設使用熱門度 (popularity) 作為排序，而且一次請求 (request) 中只回應 <code>30 筆</code>。</p>
<ul>
<li>想要讓這兩項使用 <code>時間</code> 排序，可在 <code>GET</code> 參數中加入 <code>popular=false</code></li>
<li>欲取得更多的 <code>文章資訊(meta)</code>，可以使用 <code>before={某文章編號}</code>來獲得早於 #{某文章編號} 的另外 <code>30 筆</code> 資訊。</li>
<li>欲取得更多的 <code>文章內留言</code>，可以使用 <code>after={某樓層}</code>  來獲得大於 #{某樓層} 的另外 <code>30 筆</code> 留言。</li>
</ul>
<h1 id="開始寫簡易爬蟲"><a href="#開始寫簡易爬蟲" class="headerlink" title="開始寫簡易爬蟲"></a>開始寫簡易爬蟲</h1><p>首先定義好剛剛提到的基本 URL 資訊</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dcard</span>:</span></div><div class="line"></div><div class="line">    API_ROOT = <span class="string">'http://dcard.tw/_api'</span></div><div class="line">    FORUMS = <span class="string">'forums'</span></div><div class="line">    POSTS = <span class="string">'posts'</span></div></pre></td></tr></table></figure>
<p>以及一些基本功能 @(utils.py)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># utils.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, verbose=False, **kwargs)</span>:</span></div><div class="line">    response = requests.get(url, **kwargs)</div><div class="line">    <span class="keyword">if</span> verbose:</div><div class="line">        logging.info(response.url)</div><div class="line">    <span class="keyword">return</span> response.json()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_general</span><span class="params">(forums)</span>:</span></div><div class="line">    <span class="keyword">for</span> forum <span class="keyword">in</span> forums:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> forum[<span class="string">'isSchool'</span>]:</div><div class="line">            <span class="keyword">yield</span> forum</div></pre></td></tr></table></figure>
<p>Step1. 替 class <code>Dcard</code> 新增 method，取得所有看板資訊 (metadata)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@staticmethod</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_forums</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    url = <span class="string">'&#123;api_root&#125;/&#123;api_forums&#125;'</span>.format(</div><div class="line">        api_root=Dcard.API_ROOT, api_forums=Dcard.FORUMS)</div><div class="line">    forums = get(url)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> kwargs.get(<span class="string">'no_school'</span>):</div><div class="line">        <span class="keyword">return</span> [forum <span class="keyword">for</span> forum <span class="keyword">in</span> filter_general(forums)]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> forums</div></pre></td></tr></table></figure>
<p>參數中加入 <code>no_school</code> 來控制是否過濾掉學校看板。之後想做的分析會著重於比較熱門的一般性看板，所以這邊做個開關決定是否去掉這些特定看板。</p>
<p>Step2. 替 class <code>Dcard</code> 新增 method，取得看板內文章資訊 (metadata)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@staticmethod</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_post_metas</span><span class="params">(forum, params)</span>:</span></div><div class="line">    url = <span class="string">'&#123;api_root&#125;/&#123;api_forums&#125;/&#123;forum&#125;/&#123;api_posts&#125;'</span>.format(</div><div class="line">        api_root=Dcard.API_ROOT,</div><div class="line">        api_forums=Dcard.FORUMS,</div><div class="line">        api_posts=Dcard.POSTS,</div><div class="line">        forum=forum</div><div class="line">    )</div><div class="line">    article_metas = get(url, params=params)</div><div class="line">    <span class="keyword">return</span> article_metas</div><div class="line"></div><div class="line"><span class="meta">@staticmethod</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_post_ids</span><span class="params">(forum, pages=<span class="number">3</span>)</span>:</span></div><div class="line">    <span class="string">''' </span></div><div class="line">        為了一次取的更多頁的文章 (可以把一次 request 取得 30 筆，視作取得一頁)</div><div class="line">        使用此 method 將 `get_post_metas` 做包裝，提供一次抓取多頁文章資訊，</div><div class="line">        且通常是為了之後用途而抓取 &#123;文章編號&#125;。</div><div class="line">    '''</div><div class="line">    params = &#123;<span class="string">'popular'</span>: <span class="keyword">False</span>&#125;</div><div class="line">    ids = []</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(pages):</div><div class="line">        metas = Dcard.get_post_metas(forum, params)</div><div class="line">        ids += [e[<span class="string">'id'</span>] <span class="keyword">for</span> e <span class="keyword">in</span> metas]</div><div class="line">        params[<span class="string">'before'</span>] = ids[<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> ids</div></pre></td></tr></table></figure>
<p>Step3. 最終的重點，取得單篇文章內的所有資訊，分為：內文、引用連結、留言三個部分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@staticmethod</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_post_content</span><span class="params">(post_meta)</span>:</span></div><div class="line">    post_url = <span class="string">'&#123;api_root&#125;/&#123;api_posts&#125;/&#123;post_id&#125;'</span>.format(</div><div class="line">        api_root=Dcard.API_ROOT,</div><div class="line">        api_posts=Dcard.POSTS,</div><div class="line">        post_id=post_meta[<span class="string">'id'</span>]</div><div class="line">    )</div><div class="line">    links_url = <span class="string">'&#123;post_url&#125;/links'</span>.format(post_url=post_url)</div><div class="line">    comments_url = <span class="string">'&#123;post_url&#125;/comments'</span>.format(post_url=post_url)</div><div class="line"></div><div class="line">    params = &#123;&#125;</div><div class="line"></div><div class="line">    content = get(post_url)</div><div class="line">    links = get(links_url)</div><div class="line">    comments = []</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        _comments = get(comments_url, params=params, verbose=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">if</span> len(_comments) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        comments += _comments</div><div class="line">        params[<span class="string">'after'</span>] = comments[<span class="number">-1</span>][<span class="string">'floor'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">'content'</span>: content,</div><div class="line">        <span class="string">'links'</span>: links,</div><div class="line">        <span class="string">'comments'</span>: comments</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>透過 Dcard <code>現正偷偷使用中</code> 的官方 API，完成了我們的基本爬蟲。</p>
<p>*<br>Salas</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原本爬蟲使用 PTT 作為練習標的，但是年輕人好像已經不流行用這個(?)，而且另一方面也不想在頁面 parsing 上花太多功夫。&lt;br&gt;這次想要練習的東西是爬蟲架構以及其他後續應用，而不再拘泥處理資料本身；所以選擇了與 PTT 相似性質且擁有 API 的 Dcard 作為實驗目標。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://levirve.github.io/tags/Python/"/>
    
      <category term="Spider" scheme="https://levirve.github.io/tags/Spider/"/>
    
  </entry>
  
  <entry>
    <title>網路爬蟲 Crawler Tutorial - (1) 簡介</title>
    <link href="https://levirve.github.io/2016/what-is-crawler/"/>
    <id>https://levirve.github.io/2016/what-is-crawler/</id>
    <published>2016-02-09T22:52:00.000Z</published>
    <updated>2016-08-16T16:01:29.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知識科普"><a href="#知識科普" class="headerlink" title="知識科普"></a>知識科普</h1><p>先不多做解釋直接看看，Wiki 怎麼說: <a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E8%9C%98%E8%9B%9B" target="_blank" rel="external">網路爬蟲</a></p>
<blockquote>
<p>是一種「自動化瀏覽網路」的程式，或者說是一種網路機器人。被用於自動採集頁面內容，以供做進一步處理（分析整理下載的頁面），讓使用者能更快取得需要的資訊。</p>
</blockquote>
<img src="/2016/what-is-crawler/demo.jpg" alt="The Social Network 場景 @www.blu-ray.com" title="The Social Network 場景 @www.blu-ray.com">
<a id="more"></a>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>為什麼首圖要放 <em>The Social Network</em> 中的場景呢？看過這部電影的不妨試著回想一下，片中 Mark Zuckerberg 在宿舍做了什麼事？</p>
<p><img src="http://ecx.images-amazon.com/images/I/815a7Z-t0pL._SL1500_.jpg" alt="(Media from Amazon)"></p>
<blockquote>
<p>Mark: 我在抓學校網站上所有女生的圖片啊！<br>網站一次只給看一張，手動抓累死我了<br>Mark: 沒關係，Hacker 有自己的玩法，let me show you!</p>
</blockquote>
<p><img src="http://i.imgur.com/oeujxCW.png" alt="Mark: 讓你瞧瞧我的 Perl Script"></p>
<p>所以爬蟲要幹嘛？<del>當然是抓圖啊</del> 抓任何<strong>你</strong>關注的資料！</p>
<p>當然說到爬蟲，不能不提以此壯大自己事業的 Google</p>
<p>Google 的機器人，天天爬不眠不休的爬全年無休，這麼好用的工具人上哪找？</p>
<p>所以本系列教學文就是教你如何學會<del>跟Mark一樣很會抓圖</del>養隻會在網路上跑的爬蟲！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;知識科普&quot;&gt;&lt;a href=&quot;#知識科普&quot; class=&quot;headerlink&quot; title=&quot;知識科普&quot;&gt;&lt;/a&gt;知識科普&lt;/h1&gt;&lt;p&gt;先不多做解釋直接看看，Wiki 怎麼說: &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E8%9C%98%E8%9B%9B&quot;&gt;網路爬蟲&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是一種「自動化瀏覽網路」的程式，或者說是一種網路機器人。被用於自動採集頁面內容，以供做進一步處理（分析整理下載的頁面），讓使用者能更快取得需要的資訊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/2016/what-is-crawler/demo.jpg&quot; alt=&quot;The Social Network 場景 @www.blu-ray.com&quot; title=&quot;The Social Network 場景 @www.blu-ray.com&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="https://levirve.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://levirve.github.io/tags/Python/"/>
    
      <category term="爬蟲" scheme="https://levirve.github.io/tags/%E7%88%AC%E8%9F%B2/"/>
    
  </entry>
  
  <entry>
    <title>你好，我是…</title>
    <link href="https://levirve.github.io/2015/hello-world/"/>
    <id>https://levirve.github.io/2015/hello-world/</id>
    <published>2015-12-07T11:06:47.000Z</published>
    <updated>2016-08-16T16:01:29.793Z</updated>
    
    <content type="html"><![CDATA[
<p>N年前就說重返來寫寫部落格自娛娛人，現在終於準備開始啦(吧?)<br><a id="more"></a></p>
<h2 id="從小我有個夢，我也想像XXX一樣"><a href="#從小我有個夢，我也想像XXX一樣" class="headerlink" title="從小我有個夢，我也想像XXX一樣"></a>從小我有個夢，我也想像XXX一樣</h2><p>小時候(?!)逛著網站，發現知名部落客都在推坑如何擁有自己的網站，<br>每次看完推坑文總是 <del>頭暈暈 已欲睡</del>，我是說<strong>興奮高昂</strong>！<br>於是就夢想著長大後能有自己的網站XD</p>
<h2 id="我沒專業技能啊QQ"><a href="#我沒專業技能啊QQ" class="headerlink" title="我沒專業技能啊QQ"></a>我沒專業技能啊QQ</h2><p>俗話說那就去<strong>掙經驗值點天賦啊！</strong></p>
<p>擺出起手式，拿出上古神器 WordPress！遠古記憶已經記不清第一次開始弄是什麼時候了= = 不過就用最近一次架站成功來說說故事吧。就在去年年初，一如往常在瞎逛網站時發現了 <a href="https://www.openshift.com/" target="_blank" rel="external">OpenShift</a> 這個 PaaS( *aaS 正夯！快跟上潮流 )，<br>而且開啟服務時可以直接選用 wordpress 懶人組合包，直接就裝好啦 XDDDD<br>所以我說難在哪？<strong>科技始終來自人性，懶人終究獲得救贖</strong></p>
<p>遙想從前從前啊，</p>
<ul>
<li>必須要先去租一台主機或者自己的電腦當 24 hr always open 的網站主機伺服器</li>
<li>負責處理 HTTP 請求的網頁伺服器 ( Apache ! 就阿帕契啊這還要解釋？ )</li>
<li>裝個能跑 PHP 的環境 ( Linux 或 Windows都可以 )</li>
<li>設定弄好存文章內容的資料庫 ( 通常會用 MySQL )</li>
</ul>
<p>於是出現了傳奇經典組合 LAMP ( Linux + Apache + MySQL + PHP ) ，上世代的潮流！(引戰! XD)<br>用這套傳奇組合搭配 WordPress ，就只能用 Legendary 來註解。<br><strong>老闆，來一份傳說級套餐！</strong></p>
<h2 id="以下懶人包"><a href="#以下懶人包" class="headerlink" title="以下懶人包"></a>以下懶人包</h2><p>不過誤入歧途太久，技術換了又換，現在終於架出自己的網站啦 = =<br>我都不知道是<strong>為了寫部落格學技術，還是學了技術寫部落格</strong> 囧rzzz<br>不過光這篇哈囉世界起手文修修改改也陳放快一年了…</p>
<p>最近在中國烏雲上看到一篇關於<a href="http://drops.wooyun.org/papers/10177" target="_blank" rel="external">中國翻牆的原理與實現</a>一文中引述了〈西廂計劃〉的這段話，</p>
<blockquote>
<p>我是一個死搞技術的，就是打算搞技術到死的那種人。－－〈西廂計劃〉</p>
</blockquote>
<p>讀完這篇優質文真是<strong>內心澎湃 慷慨激昂</strong><br>自稱為一個技術人，就要幹點瘋狂的事。</p>
<p>Let’s<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">==========================================</div><div class="line">Last login: Sun Dec  7 12:21:53 2015</div><div class="line"></div><div class="line">Yo, Salas! What would you like to <span class="keyword">do</span>?</div><div class="line">==========================================</div><div class="line"></div><div class="line">&gt; hack <span class="variable">$THE_WORLD</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;N年前就說重返來寫寫部落格自娛娛人，現在終於準備開始啦(吧?)&lt;br&gt;
    
    </summary>
    
    
      <category term="Hello" scheme="https://levirve.github.io/tags/Hello/"/>
    
      <category term="開箱文" scheme="https://levirve.github.io/tags/%E9%96%8B%E7%AE%B1%E6%96%87/"/>
    
      <category term="Hexo" scheme="https://levirve.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python 奇幻之旅：我到底看了什麼！</title>
    <link href="https://levirve.github.io/2015/python-fantasy/"/>
    <id>https://levirve.github.io/2015/python-fantasy/</id>
    <published>2015-07-09T22:52:00.000Z</published>
    <updated>2016-08-16T16:01:29.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Charpter-1"><a href="#Charpter-1" class="headerlink" title="Charpter 1"></a>Charpter 1</h1><img src="/2015/python-fantasy/fantasy.jpg" alt="photo-manipulation-digital-art-421405" title="photo-manipulation-digital-art-421405">
<a id="more"></a>
<h2 id="Python-是什麼？"><a href="#Python-是什麼？" class="headerlink" title="Python 是什麼？"></a>Python 是什麼？</h2><p>一種程式語言。不然還能是什麼？<br><del>當然是一種信仰。</del></p>
<h2 id="Python-可以幹嘛？"><a href="#Python-可以幹嘛？" class="headerlink" title="Python 可以幹嘛？"></a>Python 可以幹嘛？</h2><ul>
<li>Web網站開發、網路應用App開發</li>
<li>科學計算、數值分析</li>
<li>桌面圖形化程式</li>
<li>適合教學入門的程式語言</li>
<li>跨平台、跨介面，從伺服器端到用戶端；從背景腳本到圖形化程式；從桌上型個人電腦到小小的單板晶片上，甚至在手機上！簡單來說：在意想不到的地方，<strong>做出很酷的東西！</strong></li>
</ul>
<h2 id="程式語言那麼多，為什麼選-Python？"><a href="#程式語言那麼多，為什麼選-Python？" class="headerlink" title="程式語言那麼多，為什麼選 Python？"></a>程式語言那麼多，為什麼選 Python？</h2><ul>
<li>高階語言極容易學</li>
<li>跨平台移植性高</li>
<li>豐富的函式庫擴充性</li>
</ul>
<p>開始撰寫此文時，恰巧看到負評網中對於各程式語言的評價。前幾項關於 Python 評價相當有趣，體現出「簡單而實用」特性。</p>
<ul>
<li>寫起來太爽容易寫到高潮，旁人都覺得我怪怪的。<br>  （我室友都說我寫 Python 時像發酒瘋）</li>
<li>投資報酬率太高，教授不敢教。<br>  （修課時曾有次作業不限定程式語言，當然是用 Python 寫囉，嘿嘿σ`∀´)σ）</li>
<li>各領域都被<a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%88%A9%C2%B7%E6%B3%A2%E7%89%B9_%28%E8%A7%92%E8%89%B2%29" title="出自《哈利波特》，蛇之間的語言" target="_blank" rel="external">爬說語</a>佔領，太邪惡啦～<br>  （Python 這單字原意就是巨蟒，現在人人都是哈利啦～）</li>
<li>學 <a href="#" title="以「幫助女生們進入 Ruby 以及 Rails 的世界，並有能力實現自己的點子與理想」為主要訴求">RailsGirls</a> 辦 <a href="#" title="透過分享、教育與會議等活動的方式幫助更多女生可以在 Python 社群中成為主動的參與者與領導者">PyLadies</a>，可惡想去！<br>  （可惡想去！）</li>
<li>腳本語言效率有限。<br>  （所以就說要挑對場合，用對應的工具嘛！）</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/py-char.png" alt="Python Characters"></p>
<h2 id="啊，然後咧？"><a href="#啊，然後咧？" class="headerlink" title="啊，然後咧？"></a>啊，然後咧？</h2><p>我已經知道 Python 好棒棒了，那又怎樣？說好的奇幻世界咧？（敲碗）<br>別急別急，現在就來造船吧！（什麼，竟然要從這開始？！崩潰～）</p>
<p>Mac 跟 Linux 發行板基本上都有內建 Python2.7，不過之後都是用 Python3 做講解喔～至於為什麼等等會說明。<br>這邊就用Debian / Ubuntu 示範安裝 Python3 囉：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python3</span></div></pre></td></tr></table></figure></p>
<p>如果是 Windows 呢，就照著以下步驟做：<br>至<a href="https://www.python.org/downloads/" target="_blank" rel="external">Python 官方網站</a>下載安裝檔。</p>
<p>進入頁面後會發現有兩個版本：分別是 2.x 和 3.x 版，那應該選擇哪個呢？<br>這邊是有個小故事：因為 Python 3 改動的內容無法保證讓舊的 Python 2 程式碼完全升級成新版，可能讓原本 Python2 正確執行的程式碼爆炸。最後 Python 無法勉強開發者全部升級，只好繼續推出兩個版本，不過相信全面換上 Python3 是以後的趨勢。</p>
<p>這小故事告訴我們<em>兼容舊版</em>的重要性；不過這也不一定是好事，可能為了兼容性而讓整個架構變得更複雜，例如：Intel…，這又是題外話了。不過新入門並沒有舊版包袱，所以可以直接選擇 Python 3。</p>
<p>Okay, 按照安裝步驟裝好 Python 之後記得將你安裝的 Python 目錄寫進系統<strong>環境變數</strong>，這邊因為筆者個人的管理習慣將之安裝於 <code>C:\</code> 槽底下。並將 <code>C:\Python34</code> 及 <code>C:\Python34\Scripts</code> 加入環境變數。（這邊是以安裝 Python3.4 為例。）</p>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/env_var.png" alt="System Enviroment Setting"></p>
<p>打開命令列輸入指令確認<strong>環境變數</strong>設定成功：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>python -V</div></pre></td></tr></table></figure></p>
<p>若跳出剛剛選擇安裝的版本號碼，則代表設定成功。</p>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/py-V.png" alt="Python Version"></p>
<h2 id="出航囉！"><a href="#出航囉！" class="headerlink" title="出航囉！"></a>出航囉！</h2><p>第一次出航我們先用內建的編輯器 IDLE，從應用程式選單裡找出 Python &gt; <code>IDLE(Python GUI)</code>。</p>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/idle%20shell.png" alt="Python IDLE Shell"><br>選擇 <code>File</code> &gt; <code>New File</code> 開啟新檔，<br>寫一點程式碼。沒錯，傳說中的 Hello Wolrd：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">名字 = input(<span class="string">'輸入名字: '</span>)</div><div class="line">print(<span class="string">'Hello'</span>, 名字)</div></pre></td></tr></table></figure>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/idle.png" alt="Python IDLE"><br>按下 <code>F5</code> 執行：</p>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/idle%20shell%20run.png" alt="Python Hello run"></p>
<p>沒錯，你已經完成了第一支 Python 程式啦～<br>盡情享受 Python 之旅吧！</p>
<p>Good luck !</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Charpter-1&quot;&gt;&lt;a href=&quot;#Charpter-1&quot; class=&quot;headerlink&quot; title=&quot;Charpter 1&quot;&gt;&lt;/a&gt;Charpter 1&lt;/h1&gt;&lt;img src=&quot;/2015/python-fantasy/fantasy.jpg&quot; alt=&quot;photo-manipulation-digital-art-421405&quot; title=&quot;photo-manipulation-digital-art-421405&quot;&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://levirve.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
