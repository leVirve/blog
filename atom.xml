<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Salas&#39;</title>
  <subtitle>Do it for your pride.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://levirve.github.io/"/>
  <updated>2016-08-15T10:56:55.434Z</updated>
  <id>https://levirve.github.io/</id>
  
  <author>
    <name>Salas (leVirve)</name>
    <email>gae.m.project@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dcard 爬蟲於 Python 實作成果：dcard-spider</title>
    <link href="https://levirve.github.io/2016/dcard-spider-python-package/"/>
    <id>https://levirve.github.io/2016/dcard-spider-python-package/</id>
    <published>2016-07-30T09:24:44.000Z</published>
    <updated>2016-08-15T10:56:55.434Z</updated>
    
    <content type="html"><![CDATA[<p>上次談到了 Dcard 現在官方實際 production 中使用的 API URL 規則，並且撰寫了簡單的 Python scripts 來取得小部分資料。<br>而這樣的成果適合用來做小規模的後續應用，例如特定版的當日或當月文章分析等等；然而若是要拿下全站的資料，那麼我們上次的程式範例本身必須要改善來讓後續方便擴充（其實是上次程式趕工寫太醜，生理上不能接受(?) 完全沒有想要直接沿用的念頭 XD）。</p>
<p>那麼接下來的概念就是：</p>
<ol>
<li><p>我要一隻大蜘蛛（比起 crawler，我選擇 Spider！聽起來就比較猛，以下都用 spider 稱呼這隻網路爬蟲 顆顆）</p>
<img src="/2016/dcard-spider-python-package/Giant_spider_strikes.jpg" alt="[Giant spider strikes from wiki]" title="[Giant spider strikes from wiki]">
</li>
<li><p>那除了核心的軀幹之外需要先造八隻 <del>蟹</del> 腳啊！上次那個品質．．．可是撐不起這隻巨型蜘蛛的</p>
</li>
<li><p>不知所云，總之就是把之前的概念打造成好用的腿就對了。之後蜘蛛好辦事！</p>
</li>
</ol>
<p>成果已經發布在 <a href="https://pypi.python.org/pypi/dcard-spider" target="_blank" rel="external">PyPI</a> 以及 <a href="https://github.com/leVirve/dcard-spider" target="_blank" rel="external">Github</a> 上了。</p>
<a id="more"></a>
<h2 id="u61F6_u4EBA_u5305_uFF0C_u6211_u5C31_u5148_u5B89_u88DD_u518D_u8AAA"><a href="#u61F6_u4EBA_u5305_uFF0C_u6211_u5C31_u5148_u5B89_u88DD_u518D_u8AAA" class="headerlink" title="懶人包，我就先安裝再說"></a>懶人包，我就先安裝再說</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install dcard-spider</span><br></pre></td></tr></table></figure>
<p>但是 <a href="https://pypi.python.org/pypi/dcard-spider" target="_blank" rel="external">dcard-spdier@PyPi</a> 不保證有以下說的最新功能唷，因為沒有隨時發布最新的上去 XDD</p>
<h2 id="u61F6_u4EBA_u5305_uFF0C_u6211_u5C31_u52E4_u52DE_u4E00_u9EDE_u5230_Github__u88DD_u65B0_u7248"><a href="#u61F6_u4EBA_u5305_uFF0C_u6211_u5C31_u52E4_u52DE_u4E00_u9EDE_u5230_Github__u88DD_u65B0_u7248" class="headerlink" title="懶人包，我就勤勞一點到 Github 裝新版"></a>懶人包，我就勤勞一點到 Github 裝新版</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/leVirve/dcard-spider</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>裝好之後，可以先照著 README 裡的 <code>command line</code> 試試下載圖片功能，或是用 <code>program</code> 跑 sample 看看效果如何。那麼以下分享我的 Python package（套件）程式架構：</p>
<h2 id="u7A0B_u5F0F_u78BC"><a href="#u7A0B_u5F0F_u78BC" class="headerlink" title="程式碼"></a>程式碼</h2><p>先定義一個 <code>Dcard</code> 類別來描述整個套件應該有的子功能，例如目前支援 <code>forums</code> 跟 <code>posts</code> 兩個 API，所以我定義了兩個子類別負責各自功能。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" dcard.py """</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dcard.forums <span class="keyword">import</span> Forum</span><br><span class="line"><span class="keyword">from</span> dcard.posts <span class="keyword">import</span> Post</span><br><span class="line"><span class="keyword">from</span> dcard.utils <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'Dcard'</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dcard</span>:</span></span><br><span class="line">    self.client = Client(workers=workers)</span><br><span class="line">    self.forums = Forum(client=self.client)</span><br><span class="line">    self.posts = Post(client=self.client)</span><br></pre></td></tr></table></figure>
<h3 id="u770B_u677F_u6587_u7AE0_u76F8_u95DC_u8CC7_u8A0A__28Forum-layer_29"><a href="#u770B_u677F_u6587_u7AE0_u76F8_u95DC_u8CC7_u8A0A__28Forum-layer_29" class="headerlink" title="看板文章相關資訊 (Forum-layer)"></a>看板文章相關資訊 (Forum-layer)</h3><ul>
<li><p>在 <code>Forum</code> 中主要有兩個對外（作為套件提供給外部呼叫）的方法</p>
<ol>
<li><p><code>get()</code> 作為實例方法 (instance method)</p>
<ul>
<li><p>用來取得 <code>Dcard</code> 上各個看板的後設資訊 (metadata)，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">metadata_forums = dcard.forums.get()</span><br></pre></td></tr></table></figure>
</li>
<li><p>API 取得的結果是 <code>json</code> 的 list，原始資料大概長這樣：（但在程式裡就變成 list of <code>dict</code>）</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  ...,</span><br><span class="line">  &#123;</span><br><span class="line">    "<span class="attribute">id</span>": <span class="value"><span class="string">"c82dae3f-28ba-4aae-961d-c754e6ccd37a"</span></span>,</span><br><span class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"手作"</span></span>,</span><br><span class="line">    "<span class="attribute">description</span>": <span class="value"><span class="string">"供討論、分享、詢問各種手作、非文字創作品，非相關話題會刪除該文"</span></span>,</span><br><span class="line">    "<span class="attribute">alias</span>": <span class="value"><span class="string">"handicrafts"</span></span>,</span><br><span class="line">    "<span class="attribute">fullyAnonymous</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">subscriptionCount</span>": <span class="value"><span class="number">2893</span></span>,</span><br><span class="line">    "<span class="attribute">invisible</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">isSchool</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">read</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">subscribed</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">ignorePost</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">canPost</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">createdAt</span>": <span class="value"><span class="string">"2016-05-17T11:15:15.714Z"</span></span>,</span><br><span class="line">    "<span class="attribute">updatedAt</span>": <span class="value"><span class="string">"2016-07-15T10:50:49.208Z"</span></span><br><span class="line">  </span>&#125;, ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>有提供參數 <code>no_school</code> 調整要不要學校看板的資訊，從上面的 <code>json</code> 格式看得出 <code>isSchool</code> 給我們足夠的訊息來判斷</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">metadata_forums = dcard.forums.get()  <span class="comment"># 取得所有看板</span></span><br><span class="line">metadata_forums = dcard.forums.get(no_school=<span class="keyword">True</span>)  <span class="comment"># 過濾掉學校看板</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>get_metas()</code> 是實例方法 (instance method)</p>
<ul>
<li><p>用來取得各篇文章的後設資訊 (metadata)，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forum = dcard.forums(<span class="string">'funny'</span>)</span><br><span class="line">forum.get_metas()</span><br></pre></td></tr></table></figure>
</li>
<li><p>API 取得的結果同樣是 <code>json</code> 的 list，原始資料大概長這樣：（程式裡就是 list of <code>dict</code>）</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    "<span class="attribute">tags</span>": <span class="value">[<span class="string">"老爸"</span>, <span class="string">"三本"</span>, <span class="string">"罵人"</span>]</span>,</span><br><span class="line">    "<span class="attribute">title</span>": <span class="value"><span class="string">"老爸，不是這樣的吧！😂"</span></span>,</span><br><span class="line">    "<span class="attribute">forumName</span>": <span class="value"><span class="string">"有趣"</span></span>,</span><br><span class="line">    "<span class="attribute">anonymousSchool</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">forumAlias</span>": <span class="value"><span class="string">"funny"</span></span>,</span><br><span class="line">    "<span class="attribute">createdAt</span>": <span class="value"><span class="string">"2016-07-15T10:57:02.876Z"</span></span>,</span><br><span class="line">    "<span class="attribute">school</span>": <span class="value"><span class="string">"中山大學"</span></span>,</span><br><span class="line">    "<span class="attribute">commentCount</span>": <span class="value"><span class="number">0</span></span>,</span><br><span class="line">    "<span class="attribute">updatedAt</span>": <span class="value"><span class="string">"2016-07-15T10:57:02.876Z"</span></span>,</span><br><span class="line">    "<span class="attribute">forumId</span>": <span class="value"><span class="string">"a1aaa6e6-2594-4968-b7dc-e1b14bea96f4"</span></span>,</span><br><span class="line">    "<span class="attribute">likeCount</span>": <span class="value"><span class="number">0</span></span>,</span><br><span class="line">    "<span class="attribute">excerpt</span>": <span class="value"><span class="string">"雖然家在高雄但由於下學期比較忙所以也很少回家\n（這好像不是重點😂）\n-\n放暑假後當然沒事就趕緊回家啦！\n前幾天看到老爸在看電視，突然聽到一陣大笑\n「哈哈哈哈，五十六啊，哈哈哈哈」\n-\n我心裡想，蛤五"</span></span>,</span><br><span class="line">    "<span class="attribute">id</span>": <span class="value"><span class="number">224362465</span></span>,</span><br><span class="line">    "<span class="attribute">anonymousDepartment</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">pinned</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">department</span>": <span class="value"><span class="string">"企業管理學系"</span></span>,</span><br><span class="line">    "<span class="attribute">replyId</span>": <span class="value"><span class="literal">null</span></span>,</span><br><span class="line">    "<span class="attribute">gender</span>": <span class="value"><span class="string">"M"</span></span>,</span><br><span class="line">    "<span class="attribute">replyTitle</span>": <span class="value"><span class="literal">null</span></span><br><span class="line">  </span>&#125;, ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>提供豐富的參數調控，讓之後的專案開發更便利（之後的 <code>dcard-lumberjack</code> 專案大量使用此方法的參數設定）。</p>
<ul>
<li><code>num</code>: 取得幾篇的文章後設資訊 (metadata of post)。 / 預設: 30篇</li>
<li><code>sort</code>: <code>popular</code> / <code>new</code>，決定用什麼排序方法查詢 (sorted by)，最新或最熱門排序。 / 預設: <code>&#39;new&#39;</code></li>
<li><code>timebound</code>: <code>&#39;{ISO-8601 時間字串}&#39;</code>，若用 <code>new</code> 來排序查詢的話，要查詢到多早。（使用 UTC 時間，依照<a href="https://zh.wikipedia.org/wiki/ISO_8601" target="_blank" rel="external">ISO-8601</a>表示法轉成字串） / 預設: <code>&#39;&#39;</code>（空字串）</li>
<li><code>callback</code>: 不直接回傳 metas，會先套用此函式再回傳 <code>callback_function</code> 的最終值，可當作一種 reducer，減少資料複雜度。 / 預設: None<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''' example scenarios '''</span></span><br><span class="line">forum = Forum(<span class="string">'studyabroad'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 取得看板熱門 500 篇            </span></span><br><span class="line">metas = forum.get_metas(num=<span class="number">500</span>, sort=<span class="string">'popular'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 取得看板近 1000 篇中，likeCount 夠多的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 保留很多讚的文章<span class="params">(metas)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [meta <span class="keyword">for</span> meta <span class="keyword">in</span> metas <span class="keyword">if</span> meta[<span class="string">'likeCount'</span>] &gt;= <span class="number">50</span>]</span><br><span class="line">metas = forum.get_metas(num=<span class="number">1000</span>, callback=保留很多讚的文章)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 取得 無限多篇 文章資訊，直到該板無文章</span></span><br><span class="line">metas = forum.get_metas(num=forums.infinite_page)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 取得日期在 最近三個月 的文章資訊</span></span><br><span class="line">boundary_date = datetime.datetime.utcnow() - datetime.timedelta(months=<span class="number">3</span>)</span><br><span class="line">metas = forum.get_metas(</span><br><span class="line">            num=forums.infinite_page, timebound=boundary_date.isoformat())</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="Forums_full_code"><a href="#Forums_full_code" class="headerlink" title="Forums full code"></a>Forums full code</h4><p>這邊附上 <code>dcard/forums.py</code> 部分實作程式碼以及解說。</p>
<ul>
<li>一些常數定義<ul>
<li><code>metas_per_page</code> 是 <code>Dcard</code> API 的 spec</li>
<li>另外頁數都應該是大於等於零的整數，所以將 <code>infinite_page</code> 模式定為常數 -1</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" forums.py """</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forum</span>:</span></span><br><span class="line">    metas_per_page = <span class="number">30</span></span><br><span class="line">    infinite_page = -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>這邊可以看到各項參數的實際使用狀況；尤其是 <code>callback</code> 參數實際在 package 裡的使用時機。<br>也就是在回傳結果之前，如果有定義 <code>callback</code> 的話就先呼叫並將 <code>callback</code>的結果作為最終 <code>results</code> (@<code>Line#8</code>)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_metas</span><span class="params">(self, num=<span class="number">30</span>, sort=<span class="string">'new'</span>, before=None, timebound=None, callback=None)</span>:</span></span><br><span class="line">    logger.info(<span class="string">'&lt;%s&gt; 開始取得看板內文章資訊'</span>, self.name)</span><br><span class="line"></span><br><span class="line">    paged_metas = self.get_paged_metas(sort, num, before, timebound)</span><br><span class="line">    buff = flatten_lists(metas <span class="keyword">for</span> metas <span class="keyword">in</span> paged_metas)</span><br><span class="line"></span><br><span class="line">    results = callback(buff) <span class="keyword">if</span> callback <span class="keyword">else</span> buff</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">'&lt;%s&gt; 資訊蒐集完成，共%d筆'</span>, self.name, len(buff))</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>
<ul>
<li>這個是 <code>get_meta()</code> 實際負責各項判斷及處理 API 資料回傳回來的實際 <code>generator</code>。<br>其中有幾個內部的 inner method:<ul>
<li><code>eager_for_metas()</code> + <code>get_single_page_metas()</code>: 前者決定是否要繼續要資料，後者是負責送出請求的 generator。</li>
<li><code>filter_metas()</code>: 過濾並僅保留需要的資料。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_paged_metas</span><span class="params">(self, sort, num, before, timebound=<span class="string">''</span>)</span>:</span></span><br><span class="line">    params = &#123;<span class="string">'popular'</span>: sort == <span class="string">'popular'</span>, <span class="string">'before'</span>: before&#125;</span><br><span class="line">    pages = -(-num // self.metas_per_page)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_metas</span><span class="params">(metas)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span> <span class="keyword">and</span> page == pages:</span><br><span class="line">            metas = metas[:num - (pages - <span class="number">1</span>) * self.metas_per_page]</span><br><span class="line">        <span class="keyword">if</span> timebound:</span><br><span class="line">            metas = [m <span class="keyword">for</span> m <span class="keyword">in</span> metas <span class="keyword">if</span> m[<span class="string">'updatedAt'</span>] &gt; timebound]</span><br><span class="line">        <span class="keyword">return</span> metas</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eager_for_metas</span><span class="params">(bundle)</span>:</span></span><br><span class="line">        page, metas = bundle</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span> <span class="keyword">and</span> page == pages + <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> len(metas) == <span class="number">0</span>:</span><br><span class="line">            logger.warning(<span class="string">'[%s] 已到最末頁，第%d頁!'</span>, self.name, page)</span><br><span class="line">        <span class="keyword">return</span> len(metas) != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_single_page_metas</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> self.client.get_json(self.posts_meta_url, params=params)</span><br><span class="line"></span><br><span class="line">    paged_metas = zip(count(start=<span class="number">1</span>), get_single_page_metas())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page, metas <span class="keyword">in</span> takewhile(eager_for_metas, paged_metas):</span><br><span class="line">        params[<span class="string">'before'</span>] = metas[-<span class="number">1</span>][<span class="string">'id'</span>]</span><br><span class="line">        metas = filter_metas(metas)</span><br><span class="line">        <span class="keyword">if</span> len(metas) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> metas</span><br></pre></td></tr></table></figure>
<p>以上就是負責處理 <code>看板 (Forums)</code> 的 module。</p>
<h3 id="u6587_u7AE0_u5167_u5BB9_u76F8_u95DC_u8CC7_u8A0A__28Post-layer_29"><a href="#u6587_u7AE0_u5167_u5BB9_u76F8_u95DC_u8CC7_u8A0A__28Post-layer_29" class="headerlink" title="文章內容相關資訊 (Post-layer)"></a>文章內容相關資訊 (Post-layer)</h3><ul>
<li><p>在 <code>Posts</code> 中主只有一個對外（作為套件提供給外部呼叫）的方法</p>
<ul>
<li><p>不過並不是直接呼叫使用，使用前先填入參數，可以自動判別兩種提供的資訊 (<code>meta</code> 或 <code>id</code>) 來取得文章內容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" list of metas """</span></span><br><span class="line">metas = dcard.forum(<span class="string">'whysoserious'</span>).get()</span><br><span class="line"></span><br><span class="line"><span class="string">""" list of ids """</span></span><br><span class="line">ids = [meta[<span class="string">'id'</span>] <span class="keyword">for</span> meta <span class="keyword">in</span> metas]</span><br><span class="line"></span><br><span class="line">articles = dcard.posts(metas)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">articles = dcard.posts(ids)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p><code>get(self, content=True, links=True, comments=True)</code>:</p>
<ul>
<li>用來取得文章資料，而三項參數分別代表是否要取得文章內容、引用連結和該篇文章的留言。</li>
<li><p>其實作底下又分為三個部分: <code>get_content</code>, <code>get_links</code>, <code>get_comments</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(self, post_ids)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        self.client.get(api.post_url_pattern.format(post_id=post_id))</span><br><span class="line">        <span class="keyword">for</span> post_id <span class="keyword">in</span> post_ids</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_links</span><span class="params">(self, post_ids)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        self.client.get(api.post_links_url_pattern.format(post_id=post_id))</span><br><span class="line">        <span class="keyword">for</span> post_id <span class="keyword">in</span> post_ids</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments</span><span class="params">(self, post_ids, post_metas)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        self.get_comments_parallel(meta[<span class="string">'id'</span>], meta[<span class="string">'commentCount'</span>])</span><br><span class="line">        <span class="keyword">for</span> meta <span class="keyword">in</span> post_metas</span><br><span class="line">    ) <span class="keyword">if</span> post_metas <span class="keyword">else</span> (</span><br><span class="line">        self.get_comments_serial(post_id)</span><br><span class="line">        <span class="keyword">for</span> post_id <span class="keyword">in</span> post_ids</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>get_content</code>, <code>get_links</code> 很容易做到平行化 (parallel) 或並行 (concurrent) 執行來加快取得大量文章的效率 (throughput)。</p>
</li>
<li><p>比較麻煩的是 <code>get_comments</code>，因為前面提到 <code>Posts</code> 能同時吃 <code>metas</code> 和 <code>ids</code> 兩種參數，所以在取得留言上分兩種策略：</p>
<ul>
<li>提供 <code>id</code> 的情況：對多篇分別循序取得文章留言 (<code>get_comments_serial</code>)</li>
<li>提供 <code>meta</code> 的情況：對多篇分別並行取得文章留言 (<code>get_comments_parallel</code>)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments_serial</span><span class="params">(self, post_id)</span>:</span></span><br><span class="line">    comments_url = api.post_comments_url_pattern.format(post_id=post_id)</span><br><span class="line">    params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_cmts</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> self.client.get_json(comments_url, params=params)</span><br><span class="line"></span><br><span class="line">    comments = []</span><br><span class="line">    <span class="keyword">for</span> cmts <span class="keyword">in</span> takewhile(<span class="keyword">lambda</span> x: len(x), gen_cmts()):</span><br><span class="line">        comments += cmts</span><br><span class="line">        params[<span class="string">'after'</span>] = cmts[-<span class="number">1</span>][<span class="string">'floor'</span>]</span><br><span class="line">    <span class="keyword">return</span> comments</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments_parallel</span><span class="params">(self, post_id, comments_count)</span>:</span></span><br><span class="line">    pages = -(-comments_count // self.comments_per_page)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        self.client.get(</span><br><span class="line">            api.post_comments_url_pattern.format(post_id=post_id),</span><br><span class="line">            params=&#123;<span class="string">'after'</span>: page * self.comments_per_page&#125;)</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(pages)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>而 <code>dcard.posts(metas).get()</code> 回傳的是一個 <code>generator</code>，裡面的資訊結構長這樣子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> dcard.posts(metas).get():</span><br><span class="line">    print(artile)</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">comments</span>": <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">        "<span class="attribute">reportReason</span>": <span class="value"><span class="string">""</span></span>,</span><br><span class="line">        "<span class="attribute">school</span>": <span class="value"><span class="string">"逢甲大學"</span></span>,</span><br><span class="line">        "<span class="attribute">createdAt</span>": <span class="value"><span class="string">"2016-07-15T11:06:29.029Z"</span></span>,</span><br><span class="line">        "<span class="attribute">hidden</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">anonymous</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">        "<span class="attribute">floor</span>": <span class="value"><span class="number">1</span></span>,</span><br><span class="line">        "<span class="attribute">updatedAt</span>": <span class="value"><span class="string">"2016-07-15T11:06:29.029Z"</span></span>,</span><br><span class="line">        "<span class="attribute">postId</span>": <span class="value"><span class="number">224362498</span></span>,</span><br><span class="line">        "<span class="attribute">likeCount</span>": <span class="value"><span class="number">0</span></span>,</span><br><span class="line">        "<span class="attribute">id</span>": <span class="value"><span class="string">"587c62b2-70be-4469-8f3a-641705606e54"</span></span>,</span><br><span class="line">        "<span class="attribute">host</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">content</span>": <span class="value"><span class="string">"你錯了，臉很重要。"</span></span>,</span><br><span class="line">        "<span class="attribute">gender</span>": <span class="value"><span class="string">"M"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">    ]</span>,</span><br><span class="line">    "<span class="attribute">links</span>": <span class="value">&#123;&#125;</span>,</span><br><span class="line">    "<span class="attribute">content</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">tags</span>": <span class="value">[<span class="string">"卡友"</span>,　<span class="string">"畫素"</span>,　<span class="string">"百萬"</span>,　<span class="string">"幾十萬"</span>,　<span class="string">"加油吧"</span>]</span>,</span><br><span class="line">        "<span class="attribute">title</span>": <span class="value"><span class="string">"加油吧！卡友們"</span></span>,</span><br><span class="line">        "<span class="attribute">forumName</span>": <span class="value"><span class="string">"有趣"</span></span>,</span><br><span class="line">        "<span class="attribute">anonymousSchool</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">forumAlias</span>": <span class="value"><span class="string">"funny"</span></span>,</span><br><span class="line">        "<span class="attribute">createdAt</span>": <span class="value"><span class="string">"2016-07-15T11:04:12.795Z"</span></span>,</span><br><span class="line">        "<span class="attribute">replyTitle</span>": <span class="value"><span class="literal">null</span></span>,</span><br><span class="line">        "<span class="attribute">school</span>": <span class="value"><span class="string">"勤益科大"</span></span>,</span><br><span class="line">        "<span class="attribute">content</span>": <span class="value"><span class="string">"回想這幾年，我嚐盡社會的辛酸艱難\n從一開始\n什麼都沒有到了幾十萬\n再從幾十萬到百萬\n百萬再到千萬\n最後千萬到現在的2100萬\n我不是要炫耀\n只是想透過自己的經歷告訴大家\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n手機畫素越高，照片越好看😏😏😏"</span></span>,</span><br><span class="line">        "<span class="attribute">commentCount</span>": <span class="value"><span class="number">1</span></span>,</span><br><span class="line">        "<span class="attribute">updatedAt</span>": <span class="value"><span class="string">"2016-07-15T11:06:45.664Z"</span></span>,</span><br><span class="line">        "<span class="attribute">forumId</span>": <span class="value"><span class="string">"a1aaa6e6-2594-4968-b7dc-e1b14bea96f4"</span></span>,</span><br><span class="line">        "<span class="attribute">likeCount</span>": <span class="value"><span class="number">2</span></span>,</span><br><span class="line">        "<span class="attribute">excerpt</span>": <span class="value"><span class="string">"回想這幾年，我嚐盡社會的辛酸艱難\n從一開始\n什麼都沒有到了幾十萬\n再從幾十萬到百萬\n百萬再到千萬\n最後千萬到現在的2100萬\n我不是要炫耀\n只是想透過自己的經歷告訴大家\n.\n.\n.\n.\n.\n.\n.\n."</span></span>,</span><br><span class="line">        "<span class="attribute">id</span>": <span class="value"><span class="number">224362498</span></span>,</span><br><span class="line">        "<span class="attribute">anonymousDepartment</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">        "<span class="attribute">pinned</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">        "<span class="attribute">replyId</span>": <span class="value"><span class="literal">null</span></span>,</span><br><span class="line">        "<span class="attribute">gender</span>": <span class="value"><span class="string">"M"</span></span>,</span><br><span class="line">        "<span class="attribute">deletedAt</span>": <span class="value"><span class="literal">null</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>以上就是負責處理 文章 (Posts) 的 module。</p>
<h3 id="u4F7F_u7528_u7BC4_u4F8B"><a href="#u4F7F_u7528_u7BC4_u4F8B" class="headerlink" title="使用範例"></a>使用範例</h3><p>說那麼多，不如實際看看如何使用。</p>
<ul>
<li>範例情境 1: 想要看看有趣版一天裡夠熱門 (likes 數多於 100) 的文章裡，留言的都是什麼學校的人。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> dcard <span class="keyword">import</span> Dcard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dcard = Dcard()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用來存放想得到的資訊 =&gt; &#123;'某某學校': $&#123;多少留言數&#125;, ...&#125;</span></span><br><span class="line">analyzed_result = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 必須使用 UTC 時間，然後訂定搜尋範圍是一天內</span></span><br><span class="line">target_date = datetime.datetime.utcnow() - datetime.timedelta(days=<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_hot</span><span class="params">(metas)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [meta <span class="keyword">for</span> meta <span class="keyword">in</span> metas <span class="keyword">if</span> meta[<span class="string">'likeCount'</span>] &gt;= <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">metas = dcard.forums(<span class="string">'funny'</span>).get_metas(</span><br><span class="line">            num=dcard.forums.infinite_page,  <span class="comment"># 因為沒有明確數量目標 (由時間做為限制條件)，此項設為無限大</span></span><br><span class="line">            timebound=target_date.isoformat(),  <span class="comment"># 必須將時間轉成 ISO-8601 制的時間字串</span></span><br><span class="line">            callback=filter_hot  <span class="comment"># 根據條件寫個過濾器</span></span><br><span class="line">        )</span><br><span class="line">print(<span class="string">'Collect %d metas'</span> % len(metas))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因為這裡我們只關注留言資訊，其他兩個資訊可以略過</span></span><br><span class="line">articles = dcard.posts(metas).get(content=<span class="keyword">False</span>, links=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析</span></span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> articles.result():</span><br><span class="line">    <span class="keyword">for</span> comment <span class="keyword">in</span> article[<span class="string">'comments'</span>]:</span><br><span class="line">        analyzed_result[comment.get(<span class="string">'school'</span>)] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(analyzed_result)</span><br></pre></td></tr></table></figure>
<ul>
<li>結果可能長得像這樣，</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collect <span class="number">355</span> metas</span><br><span class="line"></span><br><span class="line">defaultdict(&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x0</span>xxxxxxxxxxxxxxx&gt;, &#123;</span><br><span class="line">    <span class="string">'金門大學'</span>: <span class="number">35</span>, <span class="string">'東海大學'</span>: <span class="number">71</span>, <span class="string">'國立成功大學'</span>: <span class="number">4</span>, <span class="string">'大同大學'</span>: <span class="number">9</span>, <span class="string">'玄奘大學'</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="string">'聖約翰科技大學'</span>: <span class="number">3</span>, <span class="string">'國立高雄應用科技大學'</span>: <span class="number">3</span>, <span class="string">'清華大學'</span>: <span class="number">8</span>, <span class="string">'國立臺北科技大學'</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">'國立高雄師範大學'</span>: <span class="number">3</span>, <span class="string">'國立臺灣藝術大學'</span>: <span class="number">10</span>, ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>同樣的應用，或許也可以到 whysoserious 看看哪個學校最愛發費雯 XDD</p>
<ul>
<li>範例情境 2: 想抓攝影版上最近百篇且 likes 夠高文章內文裡的”圖片”們！</li>
</ul>
<p><strong>程式作法</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dcard <span class="keyword">import</span> Dcard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_hot</span><span class="params">(metas)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [meta <span class="keyword">for</span> meta <span class="keyword">in</span> metas <span class="keyword">if</span> meta[<span class="string">'likeCount'</span>] &gt;= <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">dcard = Dcard()</span><br><span class="line"><span class="comment"># 先抓百篇 meta 出來，然後過濾出熱門的</span></span><br><span class="line">metas = dcard.forums(<span class="string">'photography'</span>).get_metas(num=<span class="number">100</span>, callback=filter_hot)</span><br><span class="line"><span class="comment"># 因為只想要分析內文裡的圖片 若是連留言回復的圖都要憶起分析，那就將 comments=False 拿掉</span></span><br><span class="line">posts = dcard.posts(metas).get(comments=<span class="keyword">False</span>, links=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">resources = posts.parse_resources()  <span class="comment"># 開始分析文章內的圖片</span></span><br><span class="line">fin, fails = posts.download(resources)  <span class="comment"># 下載分析出來的圖片</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'成功下載 %d 項！'</span> % fin <span class="keyword">if</span> len(fails) == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'出了點錯下載不完全喔'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>指令做法</strong></p>
<p>本 package 提供 <code>command-line</code> 式使用方法唷~ 方便又簡單</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dcard download <span class="operator">-f</span> photography -n <span class="number">100</span> -likes <span class="number">100</span></span><br></pre></td></tr></table></figure>
<ul>
<li>結果：</li>
</ul>
<img src="/2016/dcard-spider-python-package/snapshot.png" alt="執行成果" title="執行成果">
<p>以上就是我的 dcard-spider 架構分享。若有發現 bugs 或 功能建議歡迎至 Github issues 留言~</p>
<p>Salas / 2016.08</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次談到了 Dcard 現在官方實際 production 中使用的 API URL 規則，並且撰寫了簡單的 Python scripts 來取得小部分資料。&lt;br&gt;而這樣的成果適合用來做小規模的後續應用，例如特定版的當日或當月文章分析等等；然而若是要拿下全站的資料，那麼我們上次的程式範例本身必須要改善來讓後續方便擴充（其實是上次程式趕工寫太醜，生理上不能接受(?) 完全沒有想要直接沿用的念頭 XD）。&lt;/p&gt;
&lt;p&gt;那麼接下來的概念就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我要一隻大蜘蛛（比起 crawler，我選擇 Spider！聽起來就比較猛，以下都用 spider 稱呼這隻網路爬蟲 顆顆）&lt;/p&gt;
&lt;img src=&quot;/2016/dcard-spider-python-package/Giant_spider_strikes.jpg&quot; alt=&quot;[Giant spider strikes from wiki]&quot; title=&quot;[Giant spider strikes from wiki]&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那除了核心的軀幹之外需要先造八隻 &lt;del&gt;蟹&lt;/del&gt; 腳啊！上次那個品質．．．可是撐不起這隻巨型蜘蛛的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不知所云，總之就是把之前的概念打造成好用的腿就對了。之後蜘蛛好辦事！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;成果已經發布在 &lt;a href=&quot;https://pypi.python.org/pypi/dcard-spider&quot;&gt;PyPI&lt;/a&gt; 以及 &lt;a href=&quot;https://github.com/leVirve/dcard-spider&quot;&gt;Github&lt;/a&gt; 上了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://levirve.github.io/tags/Python/"/>
    
      <category term="Spider" scheme="https://levirve.github.io/tags/Spider/"/>
    
  </entry>
  
  <entry>
    <title>Dccard 爬蟲，透過官方API</title>
    <link href="https://levirve.github.io/2016/Dccard-crawler/"/>
    <id>https://levirve.github.io/2016/Dccard-crawler/</id>
    <published>2016-07-12T13:55:44.000Z</published>
    <updated>2016-07-30T09:25:18.136Z</updated>
    
    <content type="html"><![CDATA[<p>原本爬蟲使用 PTT 作為練習標的，但是年輕人好像已經不流行用這個(?)，而且另一方面也不想在頁面 parsing 上花太多功夫。<br>這次想要練習的東西是爬蟲架構以及其他後續應用，而不再拘泥處理資料本身；所以選擇了與 PTT 相似性質且擁有 API 的 Dcard 作為實驗目標。</p>
<a id="more"></a>
<h1 id="u7DB2_u7AD9_API__u898F_u5247"><a href="#u7DB2_u7AD9_API__u898F_u5247" class="headerlink" title="網站 API 規則"></a>網站 API 規則</h1><p>網路上流傳多種 <code>Dcard</code> API 與各式 API wrapper 程式套件，不過網站本身似乎在改版中 (看起來是為了因應前端的技術 stack 改變，轉換至 React.js 環境開發吧) 變得大量使用非同步請求 (ajax) 來獲得資料並繪製畫面。所以前述的那些套件及早期公開的 API 幾乎通通失效。</p>
<p>不過重新到網站上透過開發者工具重新觀察便能獲得一些規則，重新組合出網站實際在使用的新版 API。當然這些資訊或許隨著網站改變會失效也不一定 (尤其是 <code>_api</code> 這樣子的命名，明顯是過度產物的感覺)</p>
<p><strong>API root URL</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dcard.tw/_api/</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>API</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>看板資訊(meta)</strong></td>
<td><code>http://dcard.tw/_api/forums</code></td>
</tr>
<tr>
<td><strong>文章資訊(meta)</strong></td>
<td><code>http://dcard.tw/_api/forums/{看板名稱}/posts</code></td>
</tr>
<tr>
<td><strong>文章內文</strong></td>
<td><code>http://dcard.tw/_api/posts/{文章編號}</code></td>
</tr>
<tr>
<td><strong>文章內引用連結</strong></td>
<td><code>http://dcard.tw/_api/posts/{文章編號}/links</code></td>
</tr>
<tr>
<td><strong>文章內留言</strong></td>
<td><code>http://dcard.tw/_api/posts/{文章編號}/comments</code></td>
</tr>
</tbody>
</table>
<p>＊<code>文章資訊(meta)</code> 與 <code>文章內留言</code> 預設使用熱門度 (popularity) 作為排序，而且一次請求 (request) 中只回應 <code>30 筆</code>。</p>
<ul>
<li>想要讓這兩項使用 <code>時間</code> 排序，可在 <code>GET</code> 參數中加入 <code>popular=false</code></li>
<li>欲取得更多的 <code>文章資訊(meta)</code>，可以使用 <code>before={某文章編號}</code>來獲得早於 #{某文章編號} 的另外 <code>30 筆</code> 資訊。</li>
<li>欲取得更多的 <code>文章內留言</code>，可以使用 <code>after={某樓層}</code>  來獲得大於 #{某樓層} 的另外 <code>30 筆</code> 留言。</li>
</ul>
<h1 id="u958B_u59CB_u5BEB_u7C21_u6613_u722C_u87F2"><a href="#u958B_u59CB_u5BEB_u7C21_u6613_u722C_u87F2" class="headerlink" title="開始寫簡易爬蟲"></a>開始寫簡易爬蟲</h1><p>首先定義好剛剛提到的基本 URL 資訊</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dcard</span>:</span></span><br><span class="line"></span><br><span class="line">    API_ROOT = <span class="string">'http://dcard.tw/_api'</span></span><br><span class="line">    FORUMS = <span class="string">'forums'</span></span><br><span class="line">    POSTS = <span class="string">'posts'</span></span><br></pre></td></tr></table></figure>
<p>以及一些基本功能 @(utils.py)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># utils.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, verbose=False, **kwargs)</span>:</span></span><br><span class="line">    response = requests.get(url, **kwargs)</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        logging.info(response.url)</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_general</span><span class="params">(forums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> forum <span class="keyword">in</span> forums:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> forum[<span class="string">'isSchool'</span>]:</span><br><span class="line">            <span class="keyword">yield</span> forum</span><br></pre></td></tr></table></figure>
<p>Step1. 替 class <code>Dcard</code> 新增 method，取得所有看板資訊 (metadata)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="decorator">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_forums</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    url = <span class="string">'&#123;api_root&#125;/&#123;api_forums&#125;'</span>.format(</span><br><span class="line">        api_root=Dcard.API_ROOT, api_forums=Dcard.FORUMS)</span><br><span class="line">    forums = get(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kwargs.get(<span class="string">'no_school'</span>):</span><br><span class="line">        <span class="keyword">return</span> [forum <span class="keyword">for</span> forum <span class="keyword">in</span> filter_general(forums)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> forums</span><br></pre></td></tr></table></figure>
<p>參數中加入 <code>no_school</code> 來控制是否過濾掉學校看板。之後想做的分析會著重於比較熱門的一般性看板，所以這邊做個開關決定是否去掉這些特定看板。</p>
<p>Step2. 替 class <code>Dcard</code> 新增 method，取得看板內文章資訊 (metadata)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_post_metas</span><span class="params">(forum, params)</span>:</span></span><br><span class="line">    url = <span class="string">'&#123;api_root&#125;/&#123;api_forums&#125;/&#123;forum&#125;/&#123;api_posts&#125;'</span>.format(</span><br><span class="line">        api_root=Dcard.API_ROOT,</span><br><span class="line">        api_forums=Dcard.FORUMS,</span><br><span class="line">        api_posts=Dcard.POSTS,</span><br><span class="line">        forum=forum</span><br><span class="line">    )</span><br><span class="line">    article_metas = get(url, params=params)</span><br><span class="line">    <span class="keyword">return</span> article_metas</span><br><span class="line"></span><br><span class="line"><span class="decorator">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_post_ids</span><span class="params">(forum, pages=<span class="number">3</span>)</span>:</span></span><br><span class="line">    <span class="string">''' </span><br><span class="line">        為了一次取的更多頁的文章 (可以把一次 request 取得 30 筆，視作取得一頁)</span><br><span class="line">        使用此 method 將 `get_post_metas` 做包裝，提供一次抓取多頁文章資訊，</span><br><span class="line">        且通常是為了之後用途而抓取 &#123;文章編號&#125;。</span><br><span class="line">    '''</span></span><br><span class="line">    params = &#123;<span class="string">'popular'</span>: <span class="keyword">False</span>&#125;</span><br><span class="line">    ids = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(pages):</span><br><span class="line">        metas = Dcard.get_post_metas(forum, params)</span><br><span class="line">        ids += [e[<span class="string">'id'</span>] <span class="keyword">for</span> e <span class="keyword">in</span> metas]</span><br><span class="line">        params[<span class="string">'before'</span>] = ids[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> ids</span><br></pre></td></tr></table></figure>
<p>Step3. 最終的重點，取得單篇文章內的所有資訊，分為：內文、引用連結、留言三個部分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_post_content</span><span class="params">(post_meta)</span>:</span></span><br><span class="line">    post_url = <span class="string">'&#123;api_root&#125;/&#123;api_posts&#125;/&#123;post_id&#125;'</span>.format(</span><br><span class="line">        api_root=Dcard.API_ROOT,</span><br><span class="line">        api_posts=Dcard.POSTS,</span><br><span class="line">        post_id=post_meta[<span class="string">'id'</span>]</span><br><span class="line">    )</span><br><span class="line">    links_url = <span class="string">'&#123;post_url&#125;/links'</span>.format(post_url=post_url)</span><br><span class="line">    comments_url = <span class="string">'&#123;post_url&#125;/comments'</span>.format(post_url=post_url)</span><br><span class="line"></span><br><span class="line">    params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    content = get(post_url)</span><br><span class="line">    links = get(links_url)</span><br><span class="line">    comments = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        _comments = get(comments_url, params=params, verbose=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">if</span> len(_comments) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        comments += _comments</span><br><span class="line">        params[<span class="string">'after'</span>] = comments[-<span class="number">1</span>][<span class="string">'floor'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'content'</span>: content,</span><br><span class="line">        <span class="string">'links'</span>: links,</span><br><span class="line">        <span class="string">'comments'</span>: comments</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>透過 Dcard <code>現正偷偷使用中</code> 的官方 API，完成了我們的基本爬蟲。</p>
<p>*<br>Salas</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原本爬蟲使用 PTT 作為練習標的，但是年輕人好像已經不流行用這個(?)，而且另一方面也不想在頁面 parsing 上花太多功夫。&lt;br&gt;這次想要練習的東西是爬蟲架構以及其他後續應用，而不再拘泥處理資料本身；所以選擇了與 PTT 相似性質且擁有 API 的 Dcard 作為實驗目標。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://levirve.github.io/tags/Python/"/>
    
      <category term="Spider" scheme="https://levirve.github.io/tags/Spider/"/>
    
  </entry>
  
  <entry>
    <title>網路爬蟲 Crawler Tutorial - (1) 簡介</title>
    <link href="https://levirve.github.io/2016/%E7%88%AC%E8%9F%B2/"/>
    <id>https://levirve.github.io/2016/爬蟲/</id>
    <published>2016-02-09T14:52:00.000Z</published>
    <updated>2016-02-12T12:47:15.832Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://images2.static-bluray.com/reviews/3695_1.jpg" alt="The Social Network 場景 @www.blu-ray.com"><br><a id="more"></a></p>
<h1 id="u79D1_u666E_u77E5_u8B58"><a href="#u79D1_u666E_u77E5_u8B58" class="headerlink" title="科普知識"></a>科普知識</h1><p>先不多做解釋直接看看，Wiki 怎麼說: <a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E8%9C%98%E8%9B%9B" target="_blank" rel="external">網路爬蟲</a></p>
<blockquote>
<p>是一種「自動化瀏覽網路」的程式，或者說是一種網路機器人。被用於自動採集頁面內容，以供做進一步處理（分析整理下載的頁面），讓使用者能更快取得需要的資訊。</p>
</blockquote>
<h1 id="u6B63_u6587"><a href="#u6B63_u6587" class="headerlink" title="正文"></a>正文</h1><p>為什麼首圖要放 <em>The Social Network</em> 中的場景呢？看過這部電影的不妨試著回想一下，片中 Mark Zuckerberg 在宿舍做了什麼事？</p>
<p><img src="http://ecx.images-amazon.com/images/I/815a7Z-t0pL._SL1500_.jpg" alt="(Media from Amazon)"></p>
<blockquote>
<p>Mark: 我在抓學校網站上所有女生的圖片啊！<br>網站一次只給看一張，手動抓累死我了<br>Mark: 沒關係，Hacker 有自己的玩法，let me show you!</p>
</blockquote>
<p><img src="http://i.imgur.com/oeujxCW.png" alt="Mark: 讓你瞧瞧我的 Perl Script"></p>
<p>所以爬蟲要幹嘛？<del>當然是抓圖啊</del> 抓任何<strong>你</strong>關注的資料！</p>
<p>當然說到爬蟲，不能不提以此壯大自己事業的 Google</p>
<p>Google 的機器人，天天爬不眠不休的爬全年無休，這麼好用的工具人上哪找？</p>
<p>所以本系列教學文就是教你如何學會<del>跟Mark一樣很會抓圖</del>養隻會在網路上跑的爬蟲！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images2.static-bluray.com/reviews/3695_1.jpg&quot; alt=&quot;The Social Network 場景 @www.blu-ray.com&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://levirve.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://levirve.github.io/tags/Python/"/>
    
      <category term="爬蟲" scheme="https://levirve.github.io/tags/%E7%88%AC%E8%9F%B2/"/>
    
  </entry>
  
  <entry>
    <title>你好，我是…</title>
    <link href="https://levirve.github.io/2015/hello-world/"/>
    <id>https://levirve.github.io/2015/hello-world/</id>
    <published>2015-12-07T03:06:47.000Z</published>
    <updated>2015-12-07T04:38:48.000Z</updated>
    
    <content type="html"><![CDATA[
<p>N年前就說重返來寫寫部落格自娛娛人，現在終於準備開始啦(吧?)<br><a id="more"></a></p>
<h2 id="u5F9E_u5C0F_u6211_u6709_u500B_u5922_uFF0C_u6211_u4E5F_u60F3_u50CFXXX_u4E00_u6A23"><a href="#u5F9E_u5C0F_u6211_u6709_u500B_u5922_uFF0C_u6211_u4E5F_u60F3_u50CFXXX_u4E00_u6A23" class="headerlink" title="從小我有個夢，我也想像XXX一樣"></a>從小我有個夢，我也想像XXX一樣</h2><p>小時候(?!)逛著網站，發現知名部落客都在推坑如何擁有自己的網站，<br>每次看完推坑文總是 <del>頭暈暈 已欲睡</del>，我是說<strong>興奮高昂</strong>！<br>於是就夢想著長大後能有自己的網站XD</p>
<h2 id="u6211_u6C92_u5C08_u696D_u6280_u80FD_u554AQQ"><a href="#u6211_u6C92_u5C08_u696D_u6280_u80FD_u554AQQ" class="headerlink" title="我沒專業技能啊QQ"></a>我沒專業技能啊QQ</h2><p>俗話說那就去<strong>掙經驗值點天賦啊！</strong></p>
<p>擺出起手式，拿出上古神器 WordPress！遠古記憶已經記不清第一次開始弄是什麼時候了= = 不過就用最近一次架站成功來說說故事吧。就在去年年初，一如往常在瞎逛網站時發現了 <a href="https://www.openshift.com/" target="_blank" rel="external">OpenShift</a> 這個 PaaS( *aaS 正夯！快跟上潮流 )，<br>而且開啟服務時可以直接選用 wordpress 懶人組合包，直接就裝好啦 XDDDD<br>所以我說難在哪？<strong>科技始終來自人性，懶人終究獲得救贖</strong></p>
<p>遙想從前從前啊，</p>
<ul>
<li>必須要先去租一台主機或者自己的電腦當 24 hr always open 的網站主機伺服器</li>
<li>負責處理 HTTP 請求的網頁伺服器 ( Apache ! 就阿帕契啊這還要解釋？ )</li>
<li>裝個能跑 PHP 的環境 ( Linux 或 Windows都可以 )</li>
<li>設定弄好存文章內容的資料庫 ( 通常會用 MySQL )</li>
</ul>
<p>於是出現了傳奇經典組合 LAMP ( Linux + Apache + MySQL + PHP ) ，上世代的潮流！(引戰! XD)<br>用這套傳奇組合搭配 WordPress ，就只能用 Legendary 來註解。<br><strong>老闆，來一份傳說級套餐！</strong></p>
<h2 id="u4EE5_u4E0B_u61F6_u4EBA_u5305"><a href="#u4EE5_u4E0B_u61F6_u4EBA_u5305" class="headerlink" title="以下懶人包"></a>以下懶人包</h2><p>不過誤入歧途太久，技術換了又換，現在終於架出自己的網站啦 = =<br>我都不知道是<strong>為了寫部落格學技術，還是學了技術寫部落格</strong> 囧rzzz<br>不過光這篇哈囉世界起手文修修改改也陳放快一年了…</p>
<p>最近在中國烏雲上看到一篇關於<a href="http://drops.wooyun.org/papers/10177" target="_blank" rel="external">中國翻牆的原理與實現</a>一文中引述了〈西廂計劃〉的這段話，</p>
<blockquote>
<p>我是一個死搞技術的，就是打算搞技術到死的那種人。－－〈西廂計劃〉</p>
</blockquote>
<p>讀完這篇優質文真是<strong>內心澎湃 慷慨激昂</strong><br>自稱為一個技術人，就要幹點瘋狂的事。</p>
<p>Let’s<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==========================================</span><br><span class="line">Last login: Sun Dec  <span class="number">7</span> <span class="number">12</span>:<span class="number">21</span>:<span class="number">53</span> <span class="number">2015</span></span><br><span class="line"></span><br><span class="line">Yo, Salas! What would you like to <span class="keyword">do</span>?</span><br><span class="line">==========================================</span><br><span class="line"></span><br><span class="line">&gt; hack <span class="variable">$THE_WORLD</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;N年前就說重返來寫寫部落格自娛娛人，現在終於準備開始啦(吧?)&lt;br&gt;
    
    </summary>
    
    
      <category term="Hello" scheme="https://levirve.github.io/tags/Hello/"/>
    
      <category term="Hexo" scheme="https://levirve.github.io/tags/Hexo/"/>
    
      <category term="開箱文" scheme="https://levirve.github.io/tags/%E9%96%8B%E7%AE%B1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Python 奇幻之旅：我到底看了什麼！</title>
    <link href="https://levirve.github.io/2015/python-fantasy/"/>
    <id>https://levirve.github.io/2015/python-fantasy/</id>
    <published>2015-07-09T14:52:00.000Z</published>
    <updated>2016-02-12T12:46:44.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Charpter_1"><a href="#Charpter_1" class="headerlink" title="Charpter 1"></a>Charpter 1</h1><img src="/2015/python-fantasy/fantasy.jpg" alt="photo-manipulation-digital-art-421405" title="photo-manipulation-digital-art-421405">
<a id="more"></a>
<h2 id="Python__u662F_u4EC0_u9EBC_uFF1F"><a href="#Python__u662F_u4EC0_u9EBC_uFF1F" class="headerlink" title="Python 是什麼？"></a>Python 是什麼？</h2><p>一種程式語言。不然還能是什麼？<br><del>當然是一種信仰。</del></p>
<h2 id="Python__u53EF_u4EE5_u5E79_u561B_uFF1F"><a href="#Python__u53EF_u4EE5_u5E79_u561B_uFF1F" class="headerlink" title="Python 可以幹嘛？"></a>Python 可以幹嘛？</h2><ul>
<li>Web網站開發、網路應用App開發</li>
<li>科學計算、數值分析</li>
<li>桌面圖形化程式</li>
<li>適合教學入門的程式語言</li>
<li>跨平台、跨介面，從伺服器端到用戶端；從背景腳本到圖形化程式；從桌上型個人電腦到小小的單板晶片上，甚至在手機上！簡單來說：在意想不到的地方，<strong>做出很酷的東西！</strong></li>
</ul>
<h2 id="u7A0B_u5F0F_u8A9E_u8A00_u90A3_u9EBC_u591A_uFF0C_u70BA_u4EC0_u9EBC_u9078_Python_uFF1F"><a href="#u7A0B_u5F0F_u8A9E_u8A00_u90A3_u9EBC_u591A_uFF0C_u70BA_u4EC0_u9EBC_u9078_Python_uFF1F" class="headerlink" title="程式語言那麼多，為什麼選 Python？"></a>程式語言那麼多，為什麼選 Python？</h2><ul>
<li>高階語言極容易學</li>
<li>跨平台移植性高</li>
<li>豐富的函式庫擴充性</li>
</ul>
<p>開始撰寫此文時，恰巧看到負評網中對於各程式語言的評價。前幾項關於 Python 評價相當有趣，體現出「簡單而實用」特性。</p>
<ul>
<li>寫起來太爽容易寫到高潮，旁人都覺得我怪怪的。<br>  （我室友都說我寫 Python 時像發酒瘋）</li>
<li>投資報酬率太高，教授不敢教。<br>  （修課時曾有次作業不限定程式語言，當然是用 Python 寫囉，嘿嘿σ`∀´)σ）</li>
<li>各領域都被<a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%88%A9%C2%B7%E6%B3%A2%E7%89%B9_%28%E8%A7%92%E8%89%B2%29" title="出自《哈利波特》，蛇之間的語言" target="_blank" rel="external">爬說語</a>佔領，太邪惡啦～<br>  （Python 這單字原意就是巨蟒，現在人人都是哈利啦～）</li>
<li>學 <a href="#" title="以「幫助女生們進入 Ruby 以及 Rails 的世界，並有能力實現自己的點子與理想」為主要訴求">RailsGirls</a> 辦 <a href="#" title="透過分享、教育與會議等活動的方式幫助更多女生可以在 Python 社群中成為主動的參與者與領導者">PyLadies</a>，可惡想去！<br>  （可惡想去！）</li>
<li>腳本語言效率有限。<br>  （所以就說要挑對場合，用對應的工具嘛！）</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/py-char.png" alt="Python Characters"></p>
<h2 id="u554A_uFF0C_u7136_u5F8C_u54A7_uFF1F"><a href="#u554A_uFF0C_u7136_u5F8C_u54A7_uFF1F" class="headerlink" title="啊，然後咧？"></a>啊，然後咧？</h2><p>我已經知道 Python 好棒棒了，那又怎樣？說好的奇幻世界咧？（敲碗）<br>別急別急，現在就來造船吧！（什麼，竟然要從這開始？！崩潰～）</p>
<p>Mac 跟 Linux 發行板基本上都有內建 Python2.7，不過之後都是用 Python3 做講解喔～至於為什麼等等會說明。<br>這邊就用Debian / Ubuntu 示範安裝 Python3 囉：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python3</span></span><br></pre></td></tr></table></figure></p>
<p>如果是 Windows 呢，就照著以下步驟做：<br>至<a href="https://www.python.org/downloads/" target="_blank" rel="external">Python 官方網站</a>下載安裝檔。</p>
<p>進入頁面後會發現有兩個版本：分別是 2.x 和 3.x 版，那應該選擇哪個呢？<br>這邊是有個小故事：因為 Python 3 改動的內容無法保證讓舊的 Python 2 程式碼完全升級成新版，可能讓原本 Python2 正確執行的程式碼爆炸。最後 Python 無法勉強開發者全部升級，只好繼續推出兩個版本，不過相信全面換上 Python3 是以後的趨勢。</p>
<p>這小故事告訴我們<em>兼容舊版</em>的重要性；不過這也不一定是好事，可能為了兼容性而讓整個架構變得更複雜，例如：Intel…，這又是題外話了。不過新入門並沒有舊版包袱，所以可以直接選擇 Python 3。</p>
<p>Okay, 按照安裝步驟裝好 Python 之後記得將你安裝的 Python 目錄寫進系統<strong>環境變數</strong>，這邊因為筆者個人的管理習慣將之安裝於 <code>C:\</code> 槽底下。並將 <code>C:\Python34</code> 及 <code>C:\Python34\Scripts</code> 加入環境變數。（這邊是以安裝 Python3.4 為例。）</p>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/env_var.png" alt="System Enviroment Setting"></p>
<p>打開命令列輸入指令確認<strong>環境變數</strong>設定成功：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>python -<span class="constant">V</span></span><br></pre></td></tr></table></figure></p>
<p>若跳出剛剛選擇安裝的版本號碼，則代表設定成功。</p>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/py-V.png" alt="Python Version"></p>
<h2 id="u51FA_u822A_u56C9_uFF01"><a href="#u51FA_u822A_u56C9_uFF01" class="headerlink" title="出航囉！"></a>出航囉！</h2><p>第一次出航我們先用內建的編輯器 IDLE，從應用程式選單裡找出 Python &gt; <code>IDLE(Python GUI)</code>。</p>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/idle%20shell.png" alt="Python IDLE Shell"><br>選擇 <code>File</code> &gt; <code>New File</code> 開啟新檔，<br>寫一點程式碼。沒錯，傳說中的 Hello Wolrd：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">名字 = input(<span class="string">'輸入名字: '</span>)</span><br><span class="line">print(<span class="string">'Hello'</span>, 名字)</span><br></pre></td></tr></table></figure>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/idle.png" alt="Python IDLE"><br>按下 <code>F5</code> 執行：</p>
<p><img src="https://dl.dropboxusercontent.com/u/105585325/images/idle%20shell%20run.png" alt="Python Hello run"></p>
<p>沒錯，你已經完成了第一支 Python 程式啦～<br>盡情享受 Python 之旅吧！</p>
<p>Good luck !</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Charpter_1&quot;&gt;&lt;a href=&quot;#Charpter_1&quot; class=&quot;headerlink&quot; title=&quot;Charpter 1&quot;&gt;&lt;/a&gt;Charpter 1&lt;/h1&gt;&lt;img src=&quot;/2015/python-fantasy/fantasy.jpg&quot; alt=&quot;photo-manipulation-digital-art-421405&quot; title=&quot;photo-manipulation-digital-art-421405&quot;&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://levirve.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
